######################################################

# Glossary pair of terms and their definitions
# Glossary definitions must at the least capture the essence (core + dependents) of the term while being minimal
# Glossary definitions should highlight the essence of the term
# Glossary definitions should not be textbook-like or too verbose
# Glossary definitions should be simple, friendly, intuitive, and easy to understand
# Glossary definitions should include the term. E.g. "A/n <Term> is ..."
# Glossary definition's surrounding context or depthness should be a linked blog/article
# Comments below glossary definitions are the context or depthness that should be moved to a linked blog/article

# REMEMBER
# anchors in ref should be lowercase

######################################################


3ld: Third-Level Domain is the part of a {{< glossary term="domain" >}} name that comes to the left of the {{< glossary term="ccSLD" >}}. It is the {{< glossary term="SLD" >}} in a non-ccTLD namespace. For example, in the domain name "www.example.co.uk", "example" is the 3LD.


# add learn more !3
access-modifier: Access modifiers provide a way to **control the {{< glossary term="scope" >}} of {{< glossary term="class-member" displayTerm="class-members" >}}**, determining where a member can be accessed from. Common access modifiers are public (accessible from anywhere), private (accessible only within the class), protected (accessible within the class and its {{< glossary term="subclass" displayTerm="subclasses" >}}), and default (accessible within the {{< glossary term="package" >}}). Access modifiers **help in achieving {{< glossary term="data-hiding" >}}**.


# add learn more !2
access-token: Access-Token is **an alphanumeric string** that serves as a **temporary substitute for a user's credentials**, granting permission to access resources or perform actions within an application/service. **Primarily used in {{< glossary term="OAuth" >}} and {{< glossary term="Authentication" >}}**.
# access tokens are short-lived, require periodic refreshing via a {{< glossary term="Refresh-Token" >}}, and can be revoked by the user at any time.  If compromised, access tokens do not expose the user's credentials, minimizing security risks.


ajax: '
    {{< glossary term="Asynchronous" >}} {{< glossary term="JavaScript" >}} and {{< glossary term="XML" >}} is a set of tools to make **asynchronous {{< glossary term="ajax-request" displayTerm="ajax-requests" >}}** behind the scenes without {{< glossary term="blocking" >}} other events/interactions on the page while waiting for a {{< glossary term="response" >}}.

    {{< hr-span >}}

    Note: AJAX is a misleading name, while it might use {{< glossary term="XML" >}} to transport data, it is equally/more common to transport data as plain text or {{< glossary term="JSON" >}} text.
'


ajax-request: An AJAX Request is a **{{< glossary term="request" >}} made by a {{< glossary term="website" >}} after the initial {{< glossary term="webpage" displayTerm="page" >}} load** using {{< glossary term="AJAX" >}} to fetch some data from a {{< glossary term="server" >}} without reloading the entire page or loading a new page.


# add learn more !4
algorithm: An algorithm is  **set of well-defined instructions/steps** that are executed in an order to perform a task or solve a problem. They are the building blocks of Computer-Science which are used to perform calculations, data processing, and automated reasoning tasks.
# Whenever you want to do something, you often have a plan or a set of steps to follow, right? For example, to bake a cake, you follow a recipe and to do laundry you follow a set of steps. Similarly, a computer needs a set of instructions to perform a task.


analog: Analog is a **continuous representation of data** that can take on any value within a range and changes continuously over time. Examples include electrical signals, light pulses, radio waves, etc.  It is the opposite of digital.


# add learn more !1
api: Application Programming Interface is **an {{< glossary term="interface" >}}** i.e. a shared-boundary/layer between two {{< glossary term="software-component" displayTerm="software components" >}} that provides a means for them to communicate or interact with each other **for accessing/exchanging information**. It **defines how this access or interaction should occur** between the two.
# A software component often relies on other software components to perform certain tasks. So there needs to be a way for these components to communicate with each other. How do they do that?


api-endpoint: '
    API Endpoint is a **specific {{< glossary term="URI" >}} that is exposed by an {{< glossary term="API" >}}** that represents **a unique location for {{< glossary term="client" displayTerm="clients" >}} to access a resource** and perform actions ({{< glossary term="CRUD" >}}) on it by making {{< glossary term="request" displayTerm="requests" >}}. E.g /graphql, /teams/{teamId}/members, etc.

    {{< hr-span >}}

    Note: Different actions on the same resource URI (e.g. [HTTP methods]( {{% ref "blogs/What-are-HTTP-and-HTTPS-Protocols.md#http-methods" %}} )) are considered as same endpoint.
'


argument: '{{< glossary term="function" displayTerm="Functions" >}} often take in data through {{< glossary term="parameter" displayTerm="parameters" >}}. Arguments are these **data (values/{{< glossary term="variable" displayTerm="variables" >}}) that is passed to a function** when it is {{< glossary term="call" displayTerm="called" >}}. They are used to customize the behavior of a function.'


ascii: ASCII (American Standard Code for Information Interchange) is **a {{< glossary term="character-encoding-standard" >}}** whose Character Set consists of **128 characters** that includes english letters, numbers, special characters, and control characters. Its {{< glossary term="character-encoding-scheme" >}} uses **7-bits** to represent each character.


asynchronous: '
    Asynchronous is to do something without waiting for that thing to finish before moving on to the next thing. When that something eventually finishes, you can come back to it and optionally react based on the result. It is a programming pattern to execute tasks independently the main {{< glossary term="thread" >}} without incurring {{< glossary term="blocking" >}}.

    {{< hr-span >}}

    Note: Do not to confuse with {{< glossary term="concurrency" >}}/{{< glossary term="parallelism" >}}.
'


authenticate: To authenticate is to provide valid credentials (e.g., password, biometrics, etc.) for an account/ID to gain access to a system or service. **You prove that you are who you say you are** i.e. the account/ID owner.


authentication: Authentication is the process of **verifying the identity** of a user/system to ensure that they are who they claim to be. It is used to grant access to resources or services based on the user's identity. E.g. comparing a user inputted username and password to the system's {{< glossary term="database" >}}.


authorization: Authorization is the process of **determining what a user/system is allowed to do or access**. It involves granting or denying access/permissions to resources or services based on the user's identity, role, or other attributes. E.g. a student not having write access to a teacher's grade book.


# backend -> server-side -> server
backend: Backend is the **behind-scenes or {{< glossary term="server-side" >}}** of an application that is responsible for storing and handling data (interacting with {{< glossary term="database" displayTerm="databases" >}}), performing user operations, computations, etc. It works with the {{< glossary term="frontend" >}}**.


behavior: Behavior are the actions or functionality of an {{< glossary term="object" >}} which **represents what the object can do/perform**. They are defined by {{< glossary term="method" displayTerm="methods" >}}. With a dog as an example object, its behavior would include bark(), eat(), sleep(), play(), etc.


binary-code: Unlike humans who use and understand variety of symbols/values (0-9, A-Z, special characters), a computer is a base-2 system that uses and understands only {{< glossary term="bit" displayTerm="bits" >}}. Computers use binary code, a form of **data representation composed of series of bits** to represent **all** data, instructions, and information (whether it's text, images, sound, etc. ). It is the **fundamental language of computers**.


bit: A bit is the **smallest unit of data** in a computer. It represents a binary value, either **0 or 1**. Basis for {{< glossary term="binary-code" >}} and all computer operations. A group of 8 bits is called a byte which is a common **standard unit** of data storage in computers.


blocking: Blocking is a situation in a program when it ({{< glossary term="main" displayTerm="main thread" >}}) is **waiting for a task to complete before moving on to the next task** during which it cannot perform any other operations. It is a common issue in {{< glossary term="synchronous" >}} programming especially in apps with {{< glossary term="UI" >}} where the user interaction is frozen until the blocking task (e.g., heavy computation, network {{< glossary term="request" >}}, i/o operation, etc.) is completed.


cache: A cache is a **location for temporary data storage** that stores copies of frequently accessed data to **speed up data access and retrieval** by directly serving the data from the cache instead of fetching it from the original source or repeating expensive computations. Caches are used in hardware (CPU cache, disk cache) and software (browser cache, {{< glossary term="database" >}} cache) to improve performance.


call: Calling is the process of **invoking/executing a {{< glossary term="function" >}}**. When a function is called, the program jumps to the function's code block, executes the code, and then returns to the point where the function was called along with the output (if any).


cascading: '
    Cascading is the process in which an operation or set of operations is repeated multiple times, with the **output of each operation becoming the input** for the next operation.

    {{< hr >}}

    ({{< glossary term="CSS" >}}) Cascading refers to applying a **priority order** when multiple rules target the same element. The "cascade" ensures that **the most specific rule (or the last one defined) wins**, allowing different styles to be combined smoothly. In CSS, inline > internal > external and id > class > element.
'


ccsld: Country Code Second-Level Domain is the part of a {{< glossary term="domain" >}} name that comes to the left of the {{< glossary term="ccTLD" >}}. It is a hierarchy to the TLD that indicates the type of entity intended to register the SLD under it (e.g. .co (commercial), .gov (government), etc). For example in the .uk namespace an academic institution would register under the .ac.uk ccSLD, while companies would register under .co.uk.


cctld: Country Code Top-Level Domain is a two-letter **{{< glossary term="TLD" >}}** that is **specific to a country or territory**. It is considered a domain extension that is used to identify websites associated with a particular country or region. Examples include .us (United States), .uk (United Kingdom), .in (India), etc.


character-encoding-scheme: A character encoding scheme defines how {{< glossary term="code-point" displayTerm="code-points" >}} of a {{< glossary term="character-encoding-standard" >}} are represented in {{< glossary term="binary-code" >}} or memory. Examples include {{< glossary term="UTF-8" >}}, {{< glossary term="UTF-16" >}}, {{< glossary term="ASCII" >}}, etc.


character-encoding-standard: Computers can only understand {{< glossary term="binary-code" >}}, so how do they understand/represent characters/text? {{< hr-span >}} Through {{< glossary term="code-point"  displayTerm="code-points" >}} implemented by a {{< glossary term="character-encoding-scheme" >}} in binary-code. Character encoding standards are **a Character Set + corresponding Code Points**. Examples include {{< glossary term="ASCII" >}}, {{< glossary term="Unicode" >}}, etc.


cipher: A cipher is **an {{< glossary term="algorithm" >}} used for {{< glossary term="encryption" >}} and {{< glossary term="decryption" >}}** of data. It takes plain-text data and converts it into a secret scrambled code ({{< glossary term="ciphertext" >}}), or vice-versa. It may use an {{< glossary term="encryption-key" >}}/{{< glossary term="decryption-key" >}} to perform this operation. Examples include AES, DES, RSA, etc.


ciphertext: CipherText is **the secret scrambled code** produced by a {{< glossary term="cipher" >}} when plain-text data is {{< glossary term="encryption" displayTerm="encrypted" >}}. It is unreadable unless {{< glossary term="decryption" displayTerm="decrypted" >}} with the correct {{< glossary term="decryption-key" >}}. Purpose is to store or transmit information with confidentiality and security.


claim: A claim is a statement that one entity, such as a person or organization, makes about itself or another entity. They define what the entity is or is not


class: A class is basically **{{< glossary term="encapsulation" >}} of related {{< glossary term="variable" displayTerm="data" >}} and {{< glossary term="function" displayTerm="behavior" >}} into a single unit**. E.g., a class "Car" can have states like color, model, speed, etc., and behaviors like start(), stop(), accelerate(), etc. <br> However, **it is abstract**, thus to have an actual car, you need to **create an {{< glossary term="instance" >}}** of the class, **called an {{< glossary term="object" >}}**. It acts as a blueprint/template for objects, also known as an object factory. It is a **fundamental concept in {{< glossary term="OOP" >}}**.


class-member: 'Class members are **the {{< glossary term="variable" displayTerm="variables" >}}, {{< glossary term="method" displayTerm="methods" >}} and {{< glossary term="inner-class" displayTerm="inner-classes" >}}** that are defined within a {{< glossary term="class" >}}.'


# client <- client-side <- frontend
client: Clients are **devices/software that accesses or makes use of the services/resources provided by a {{< glossary term="server" >}}**. It does this by making {{< glossary term="request" displayTerm="requests" >}} to it for some data. Clients can be {{< glossary term="website" >}}/browsers, mobile applications, desktop applications, etc.


client-server: 'Client-Server is **a application architecture that divides tasks between two types of entities**: **{{< glossary term="client" displayTerm="clients" >}}**, responsible for the {{< glossary term="UI" >}}, {{< glossary term="request" displayTerm="requests" >}} services/resources from the server and **{{< glossary term="server" displayTerm="servers" >}}**, responsible for storing, handling and processing data, {{< glossary term="response" displayTerm="provides" >}} services/resources to the client.'


# frontend -> client-side -> client
client-side: Client-Side refers to **things that happen on the {{< glossary term="client" >}}**. It includes rendering of the {{< glossary term="UI" >}}, handling user interactions and events, sending {{< glossary term="request" displayTerm="requests" >}} for some data to the {{< glossary term="server" >}}, computing, etc.


# TODO try condensing
client-side-rendering: Client Side Rendering is the **process of creating {{< glossary term="webpage" displayTerm="webpages" >}} by/on the {{< glossary term="client" >}} (browser) after receiving the {{< glossary term="response" >}}** (usually shell {{< glossary term="HTML" >}} and lotta {{< glossary term="javascript" displayTerm="JS" >}}) from the {{< glossary term="web-server" >}} by fetching and loading content and data using JS and {{< glossary term="AJAX" >}} and manipulating the {{< glossary term="DOM" >}}. It enables {{< glossary term="Single-Page-Application" displayTerm="Single-Page-Applications" >}}.


code-point: A code point is a **numerical value that represents a single character** in a character set (E.g. English, Numbers, Latin, special characters, etc.). For example, the code point for 'A' is 65, 'a' is 97, '0' is 48, etc. in {{< glossary term="ASCII" >}} and code point for '😀' is U+1F600 (128,512 in decimal), 'Σ' is U+03A3 (931 in decimal), etc in {{< glossary term="Unicode" >}}. It is the **unique identifier for a character** in a  {{< glossary term="character-encoding-standard" >}}  like ASCII, Unicode, etc.


cohesion: The degree to which the elements (like {{< glossary term="variable" displayTerm="variables" >}}, {{< glossary term="function" displayTerm="functions" >}}) inside an entity (like a {{< glossary term="class" >}} or {{< glossary term="module" >}}) are related to each other. High cohesion means that the elements are closely related and work together to perform the same/single tasks. Low cohesion means that the elements are not closely related and perform different/multiple tasks.


compile: Computers cannot understand or execute {{< glossary term="source-code" >}}. Compilation is the process of **translating the complete source code into {{< glossary term="machine-language" >}} before the program starts executing**. A {{< glossary term="compile" displayTerm="compiler" >}} is required only once, then the compiled code can be executed multiple times without recompilation. The output of the compilation process is an executable file that can be run directly by the computer.


compile-time: Compile-Time is the **period during which a program is being {{< glossary term="compile" displayTerm="compiled" >}}**, before it starts executing. It precedes the {{< glossary term="runtime" displayTerm="run-time" >}}. Some programming languages only have a run time, as they are {{< glossary term="interpret" displayTerm="interpreted" >}}.


compiler: A compiler is a **program that {{< glossary term="compile" displayTerm="compiles" >}} other programs**. It also checks for errors in the code, and optimizes the code for better performance. The output of the compilation process is an executable file that can then be run directly by the computer.


component: Component is **a {{< glossary term="class" >}} whose {{< glossary term="instance" displayTerm="instances" >}} are present in another class** as a {{< glossary term="state" displayTerm="field" >}}, viz. {{< glossary term="composition" >}}.


composite: Composite is **a {{< glossary term="class" >}} that contains {{< glossary term="object" displayTerm="objects" >}} of other classes** as a {{< glossary term="state" displayTerm="field" >}}, viz. {{< glossary term="composition" >}}.


composition: Composition is an {{< glossary term="OOP" >}} **concept of creating {{< glossary term="instance" displayTerm="instances" >}} which have {{< glossary term="reference" displayTerm="references" >}} to other instances** i.e. a {{< glossary term="class" >}} ({{< glossary term="composite" >}}) containing an object of another class ({{< glossary term="component" >}}), as a {{< glossary term="state" displayTerm="field" >}}. It **defines a "has-a" relationship**, e.g., a room has a table, a car has an engine, etc. It is a way to form new classes by combining existing classes.


concurrency: Concurrency is the execution of multiple tasks in the same time period in an interleaved and overlapping manner (however not {{< glossary term="parallelism" displayTerm="simultaneously" >}}) on a single main {{< glossary term="thread" >}}. It implies one task can pause and resume later, continuing from where it left off.


contiguous: Contiguous is to mean **continuous** or **adjacent**, without any gaps/breaks/spaces in between. In the context of memory, it refers to **blocks of memory locations that are next to each other, forming a continuous range of addresses**. {{< glossary term="diag-memory-address" displayTerm="Visualize" >}}.


cookie: '
    Cookies are **small pieces of data stored on your browser by {{< glossary term="website" displayTerm="websites" >}} you visit**. They have a name and a value. They are used to store user-specific information like login status, preferences, shopping cart items, and more.

    {{< hr-span >}}

    [Learn more]( {{% ref "/blogs/What-Are-Browser-HTTP-Cookies" %}} )
'


coupling: Coupling denotes the **degree of inter-dependency/connection between two entities** (like {{< glossary term="class" >}}, {{< glossary term="module" >}}, {{< glossary term="function" >}}, etc.). High coupling indicates that the entities are tightly linked and rely heavily on each other, making them harder to change independently without affecting the other. Conversely, low coupling means that the entities are loosely linked and can be more easily changed independently without affecting each other.


cross-origin: Cross-Origin refers to **{{< glossary term="request" displayTerm="requests" >}} made from one {{< glossary term="website" >}} to another website**, specifically, when the {{< glossary term="web-origin" displayTerm="origin" >}} of the {{< glossary term="client" >}} ({{< glossary term="web-document" displayTerm="document" >}} or {{< glossary term="web-script" displayTerm="script" >}} loaded by one origin) making the request and the origin of the {{< glossary term="web-server" displayTerm="server" >}} providing the requested resource are different. E.g. a script on 'example.com' making a request to 'freeimages.com/image.jpg'.


crud: CRUD stands for **Create, Read, Update, Delete**. It represents the four basic operations that can be performed on data. Create is for adding new data, Read is for retrieving data, Update is for modifying data, and Delete is for removing data.


csrf: Cross-Site Request Forgery is a type of {{< glossary term="web" >}} security vulnerability where an attacker's malicious {{< glossary term="website" >}} tricks a user's browser into making an unwanted {{< glossary term="request" >}} to a different website where the user is {{< glossary term="authenticate" displayTerm="authenticated" >}}. The attacker can perform actions on behalf of the user without their knowledge.


css: '{{< glossary term="Cascading" >}} {{< glossary term="Style-Sheet-Language" displayTerm="Style Sheets" >}} is used for **describing and styling the presentation** of a {{< glossary term="web-document" displayTerm="document" >}} written in {{< glossary term="HTML" >}}. It controls how elements should be rendered on screen, on paper, in speech, or on other media. E.g., targeting the color, font, size, spacing, positioning, and layout of elements on a {{< glossary term="webpage" >}}.'


data-hiding: "
    Data-Hiding is an {{< glossary term=OOP >}} concept that puts {{< glossary term=encapsulation >}} into good use by **restricting the direct access of a {{< glossary term=class  displayTerm=class's >}} {{< glossary term=state >}} from anywhere outside the class**. It enforces a forcefield around the state by **allowing only the class's {{< glossary term=method displayTerm=methods >}} to access and manipulate the state**, and **allowing outside access only through these methods**. Achieved through {{< glossary term=access-modifier displayTerm=access-modifiers >}}.

    {{< hr-span >}}

    Note: 'Hiding' is a misnomer, it is not about hiding data or making it inaccessible, but about controlling access to data.
"


data-structure: A data-structure is a way of **modelling/structuring and storing related data** by **defining the relationships between the data** so that it can be **accessed and modified efficiently**. It groups/unites data into a 'container', for example {{< glossary term="diag-array" displayTerm="arrays" >}}, {{< glossary term="diag-linkedlist" displayTerm="LinkedLists" >}}, {{< glossary term="diag-tree" displayTerm="Trees" >}}, {{< glossary term="diag-hashtable" displayTerm="HashTables" >}} etc.


data-type: Data-Type indicates the **type of data that a {{< glossary term="variable" >}} is allowed to store** ({{< glossary term="statically-typed" >}} languages) or the **type of data value that a variable currently holds** ({{< glossary term="dynamically-typed" >}} languages). It defines the operations that can be performed on the  value. Examples include integers, strings, booleans, {{< glossary term="function" displayTerm="functions" >}}, {{< glossary term="object" displayTerm="objects" >}}, etc.


database: A database is a **collection of related data** that is stored and structured/organized in a way that **allows for efficient retrieval, updating, and management**. Databases are used to store information for applications, {{< glossary term="website" displayTerm="websites" >}}, and other systems.


dbms: A Database Management System is **a software that is used to create, manage, and maintain {{< glossary term="database" displayTerm="databases" >}}**. It provides an {{< glossary term="interface" >}} for users to interact with the database and perform data {{< glossary term="CRUD" >}} operations. It ensures the integrity, security, backup/recoverability and efficiency of the database. Examples include MySQL, PostgreSQL, MongoDB, etc.


dbms-server: Most modern {{< glossary term="DBMS" >}} are {{< glossary term="client-server" >}} systems, where the **DBMS software is a {{< glossary term="server-process" >}} that provides {{< glossary term="database" >}} services (managing databases, handling queries, etc.) to {{< glossary term="client" displayTerm="clients" >}} (users, applications, etc.) that connect to it over a network**. DBMS-server is this server-process that binds to a {{< glossary term="port" >}} and listens for incoming connections, accepts and processes {{< glossary term="request" displayTerm="requests" >}}, and sends back {{< glossary term="response" displayTerm="responses" >}}.


decode: Decoding is the **process of converting {{< glossary term="encode" displayTerm="encoded" >}} data back to its original form**. It is the reverse of encoding and is used to retrieve the original data from its encoded form.


decryption: Decryption is the **process of converting the secret scrambled code ({{< glossary term="ciphertext" >}}) back into plain-text data** using a {{< glossary term="cipher" >}}. The correct {{< glossary term="decryption-key" >}} is required to perform this operation.


decryption-key: Decryption key is a secret value (random string of characters) that is **used to {{< glossary term="decryption" displayTerm="decrypt" >}} secret scrambled code ({{< glossary term="ciphertext" >}}) back into plain-text data**. The key is used by the {{< glossary term="cipher" >}} to perform the operation.


diag-array: '<img src="https://www.tutorialspoint.com/data_structures_algorithms/images/arrays1.jpg" width="606px" height="269px" alt="Array Data Structure" caption="Array Data Structure" onclick="this.requestFullscreen()" >'

diag-hashtable: '<img src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*l9eCykFTYwvLZgy62id5Ag.png" width="720px" height="351px" alt="Hash Table Data Structure" caption="Hash Table Data Structure" onclick="this.requestFullscreen()" >'

diag-linkedlist: '<img src="https://media.geeksforgeeks.org/wp-content/uploads/20220829110944/LLdrawio.png" width="812px" height="221px" alt="Linked List Data Structure" caption="Linked List Data Structure" onclick="this.requestFullscreen()" >'

diag-memory-address: '<img src="http://www.rjhcoding.com/images/pmem.png" width="700px" height="300px" alt="Memory Addressing" caption="Memory Addressing" onclick="this.requestFullscreen()" >'

diag-tree: '<img src="https://media.geeksforgeeks.org/wp-content/uploads/20240415185343/tree-data-structure-banners-(2).webp" width="1001px" height="470px" alt="Tree Data Structure" onclick="this.requestFullscreen()" >'


digital: Digital is a **discrete representation of data** where the data is represented by discrete values. Examples include binary code, numbers, text, etc.


discord: Discord is a platform where you can chat, speak, stream with your friends or communities. A Discord server is like a big group space. Servers contain channels which are like chat/voice rooms for a specific topic. Roles are assignable to server members which are for allowing/denying members access to certain things or for identifications like age, region, etc. Discord bots are user interactable community-made programs that can help you manage your server, play music, play games, etc that you can add to your server.


dns: The Domain Name System **translates/resolves {{< glossary term="website" >}} {{< glossary term="domain" >}} names into {{< glossary term="IP-Address" displayTerm="IP Addresses" >}}** of the {{< glossary term="web-server" displayTerm="web-servers" >}} that hosts the {{< glossary term="website" >}}. Browsers use it to find the location/device to {{< glossary term="request" >}} the website from. It acts as the internet's phone book, eliminating the need for users to remember IP addresses and instead use human-readable domain names.


# add learn more !2
dom: Document object Model is **a {{< glossary term="diag-tree" displayTerm="tree-like" >}} {{< glossary term="data-structure" >}} representing a {{< glossary term="webpage" >}}** where each node represents a part of the page (e.g., elements, attributes, text, etc.). It allows {{< glossary term="javascript" displayTerm="JS" >}} to manipulate the webpage on {{< glossary term="client-side" >}} after it is rendered. Thus, it is **a programming {{< glossary term="interface" >}} for webpages that enables user interaction with the webpage**, e.g. changing color theme, click/hover effects, animation effects, menu toggles, etc.
# Before {{< glossary term="javascript" displayTerm="JS" >}}, web pages had little/no interactivity, the content, style, layout of the webpage could not be altered after it was loaded and rendered on the {{< glossary term="client" >}}(browser).


# add learn more !2
domain: A domain is **a unique name that identifies a {{< glossary term="website" >}} on the {{< glossary term="internet" >}}**. Domain names are organized in a hierarchy, with the {{< glossary term="TLD" >}} at the end, the {{< glossary term="SLD" >}} before it, and the optional {{< glossary term="subdomain" >}} before that. It is also called a web-address as browsers use it to locate and access websites.
# ^^^ A domain is more than just a name of a website (e.g., google.com, facebook.com) that is used to access said website, it is a **human-readable address** that {{< glossary term="DNS" displayTerm="represents" >}} the {{< glossary term="IP-Address" >}} of a website's {{< glossary term="web-server" >}}.


dynamic-allocation-memory: Dynamic Memory Allocation is the **process of allocating memory to a program at {{< glossary term="runtime" >}}**.


dynamically-typed: In a dynamically-typed programming language, the **{{< glossary term="data-type" >}} of {{< glossary term="variable" displayTerm="variables" >}} are determined at {{< glossary term="runtime" >}}** because the data-type is associated with data values instead of the variable and type of data value a variable holds can change during the execution of the program. Examples include JavaScript, Python, Ruby, etc.


encapsulation: In {{< glossary term="cohesion" displayTerm="low-cohesion" >}} systems, the data ({{< glossary term="variable" displayTerm="variables" >}}) and {{< glossary term="function" displayTerm="functions" >}} are scattered and loosely/not related. **Encapsulation is the bundling/grouping of data and functions that operate on that data (i.e. those data and functions that are related) into a single unit, called a {{< glossary term="class" >}}**. Encapsulation enables {{< glossary term="data-hiding" >}} and increases cohesion. One of the four fundamental {{< glossary term="OOP" >}} concepts.


encode: Encoding is the **process of converting data from one form to another**. It is usually performed to ensure that the data is **compatible** with a specific format/system, or to **efficiently and properly** transmit/store the data. Examples include URL encoding, base64 encoding, etc.


encryption: Encryption is the process of **converting plain-text data into a secret scrambled code ({{< glossary term="ciphertext" >}})** by a {{< glossary term="cipher" >}} using an {{< glossary term="encryption-key" >}} to prevent unwanted people from reading it. The scrambled message can only be understood by someone who has the correct {{< glossary term="decryption-key" >}}.


encryption-key: Encryption-key is a secret value (random string of characters) that is **used to {{< glossary term="encryption" displayTerm="encrypt" >}} plain-text data**. The key is used by a {{< glossary term="cipher" >}} to convert the plain-text data into a secret scrambled code ({{< glossary term="ciphertext" >}}).


first-class-citizen: In programming languages, first class citizens are **entities/{{< glossary term="data-type" displayTerm="data-types" >}} that can be treated like any other value or {{< glossary term="variable" >}}**. It can be passed as an {{< glossary term="argument" >}} to a {{< glossary term="function" >}}, returned from a function, assigned to a variable as a value. In some languages, functions are first-class citizens, this allows for more flexibility and power in the language.


framework: A framework is **a collection of tools and {{< glossary term="library" displayTerm="libraries" >}} that help developers build applications more efficiently** by providing pre-written code for common/boiler-plate tasks. Frameworks provide a **structure** for developing applications and **enforce** certain patterns and practices to **ensure** consistency and maintainability.


# frontend -> client-side -> client
frontend: Frontend is the **{{< glossary term="client-side" >}}/front-scenes** of a application that is responsible for rendering of the {{< glossary term="UI" >}}, handling user interactions and events, communicating with the {{< glossary term="backend" >}}, computing.


ftp: "File Transfer Protocol is a standard network {{< glossary term=protocol >}} used to **transfer files between a {{< glossary term=client >}} and a {{< glossary term=server >}}** on a computer network. It uses two separate connections: a control connection to send commands between the client and server, and a data connection to transfer the actual files. FTP is commonly used to upload files to a website, download software, and share files between devices."


function: A function is a **block of code that performs a specific task or operation**. It may take in {{< glossary term="argument"  displayTerm="arguments" >}}, performs its work, and may return a result. In some programming languages, functions are {{< glossary term="first-class-citizen" >}} i.e. they are like any other data value (which are {{< glossary term="reference" displayTerm="references" >}} to the first instruction of the function).


full-duplex: Full-Duplex is a **communication channel that allows data to flow in both directions simultaneously**. It means that data can be sent and received at both ends at the same time. It is like a telephone conversation where both parties can talk and listen at the same time.


half-duplex: Half-Duplex is a **communication channel that allows data to flow in both directions, but not simultaneously**. It means that data can be sent and received at both ends, but only one end can send data at any point of time. It is like a walkie-talkie where only one person can talk at a time.


heap: "
    The heap is a **region of a computer's memory that is {{< glossary term=dynamic-allocation-memory displayTerm=dynamically-allocated >}}**. The programmer can allocate and deallocate memory any time during the program's execution.

    {{< hr-span >}}

    Note:  While it is an abstracted logical concept implemented by a programming language (all program memory is in RAM), it is larger and slower to {{< glossary term=memory-stack displayTerm=stack >}}.
"


high-level: High-Level refers to **programming languages that are closer to human language and further from {{< glossary term="machine-language" >}}**, making it easier to read, write and understand for humans.  It is abstracted from the details of the computer's hardware and provides more simplicity and features to the programmer, making it easier to develop software. However, they are less efficient and slower to execute than {{< glossary term="low-level" >}} languages and more work is required to convert them to machine language. Examples include Python, Java, JavaScript, etc.


html: '{{< glossary term="HyperText" >}} markup language is the **standard {{< glossary term="Markup-Language" >}} for creating {{< glossary term="webpage" displayTerm="webpages" >}} and web applications**. It **describes the structure and semantic meaning** of web page content using a system of tags and attributes. HTML elements are the building blocks of a website, e.g. headings (<​h1-6/>), paragraphs (<​p/>), images (<​img>), links (<​a/>), etc which can be nested inside each other. The browser reads the HTML file and renders the content on the screen.'


http: '
    {{< glossary term="HyperText" >}} {{< glossary term="Transfer" >}} {{< glossary term="Protocol" >}} is a communication protocol that uses {{< glossary term="client-server" >}} model with {{< glossary term="request-response" >}} protocol that is **designed to transfer data between networked devices**. It is stateless meaning each {{< glossary term="request" >}} is independent and does not remember/rely on previous requests. It is the foundation of data communication on the {{< glossary term="web" displayTerm="World Wide Web" >}} which allows browsers to retrieve {{< glossary term="webpage" displayTerm="webpages" >}} from {{< glossary term="web-server" displayTerm="web-servers" >}}.

    {{< hr-span >}}

    [learn more]( {{% ref "/blogs/What-are-HTTP-and-HTTPS-Protocols" %}} )
'


http-server: HTTP-Server is **a {{< glossary term="server-process" >}} software that understands {{< glossary term="URL" displayTerm="URLs" >}} (web addresses) and {{< glossary term="HTTP" >}}**. It listens for incoming HTTP requests from {{< glossary term="client" >}} (browsers) and sends back HTTP responses containing the requested {{< glossary term="webpage" >}} or data.
# {{< glossary term="client" displayTerm="Clients" >}} (browsers) can access it through {{< glossary term="domain" >}} names of the {{< glossary term="website" displayTerm="websites" >}} it stores, which then delivers the {{< glossary term="request" displayTerm="requested" >}} {{< glossary term="web-component" displayTerm="website components" >}} back to the clients.


https: '
    {{< glossary term="HyperText" >}} {{< glossary term="Transfer" >}} {{< glossary term="Protocol" >}} Secure is the **secure version of {{< glossary term="HTTP" >}}**. It {{< glossary term="encryption" displayTerm="encrypts" >}} the data exchanged between the {{< glossary term="client" >}} and {{< glossary term="server" >}}, ensuring that it cannot be intercepted, read and understood by unauthorized parties.

    {{< hr-span >}}

    [Learn more]( {{% ref "/blogs/What-are-HTTP-and-HTTPS-Protocols#https" %}} )
'


hypertext: A text that contains links to other texts. When you click on a link, you are taken to another text. In the context of the {{< glossary term="web" >}}, it refers to web pages that contain links to other web pages.


idempotent: An operation is idempotent if **applying it multiple times has the same effect as applying it once** or in other words, an operation that **produces the same result no matter how many times it is executed**. For example, deleting a file, adding 0 to a number, etc. Idempotent operations are safe to repeat and do not have unintended side effects.


in-memory: In-memory refers to **data that is stored in the computer's RAM**. It is faster to access (read) and modify (write) data in memory than on disk, but it is volatile and data is lost when the computer is turned off.


inheritance: Inheritance is an {{< glossary term="OOP" >}} concept that **allows a {{< glossary term="subclass" >}} to copy/clone/inherit {{< glossary term="class-member" displayTerm="class-members" >}} from its {{< glossary term="superclass" >}}**. The subclass can {{< glossary term="override" >}} or extend (add new) superclass's behavior without modifying the superclass itself. It defines "is-a" relationship, for example, a Car is a Vehicle and a Dog is an Animal where Car and Dog inherit properties and behaviors from Vehicle and Animal respectively.


# TODO add use-case
inner-class: Inner classes are **{{< glossary term="class" displayTerm="classes" >}} defined within another class i.e. nesting**. Inner classes can access the {{< glossary term="class-member" displayTerm="class-members" >}} of the outer class and vice versa.


instance: An instance is **an occurrence/implementation/realization (i.e. a concrete entity) of an abstract entity**. In the context of {{< glossary term="OOP" >}}, an instance is a specific {{< glossary term="object" >}} (concrete entity) created from a {{< glossary term="class" >}} (abstract entity). Each instance has its own unique data and can perform actions defined by the class.


instantiate: Instantiation is the **process of creating an {{< glossary term="instance" >}} of a {{< glossary term="class" >}}** in {{< glossary term="OOP" >}}. When a class is instantiated, a new object is created based on the class's blueprint.


interface: '
    An interface is **a shared boundary/layer** between two entities (e.g., {{< glossary term="software-component" displayTerm="software components" >}}, devices, systems, etc.) that provides a means for them to communicate or interact with each other **for accessing/exchanging information**. It **defines how this access or interaction should occur** between the entities.

    {{< hr >}}

    ({{< glossary term="OOP" >}}) An interface is like a blueprint/template for a {{< glossary term="class" >}} that defines a set of {{< glossary term="method"  displayTerm="methods" >}} that a class must implement. It defines a contract that the implementing class must adhere to thereby telling what a class must do but not how it should do it.
'

internet: The internet is a **global network of interconnected computers and devices** that connects any device in the world to any other device in the world. It allows users to access and share information, resources, and services across the globe. It is a network of networks where each device is identified by a unique {{< glossary term="IP-Address" >}}.


internet-resource: An internet resource can be **anything that is accessible over the {{< glossary term="internet" >}}**. It can be a {{< glossary term="webpage" >}}, a file, a service, a device, a {{< glossary term="database" >}}, etc.


interpret: Computers cannot understand or execute {{< glossary term="source-code" >}}. Interpretation is the **process of translating one line of source-code into {{< glossary term="machine-language" >}}** AND **then executing it BEFORE moving to the next line**. The system will ALWAYS require an {{< glossary term="interpreter" >}} software to execute the program. Translation has to be done during {{< glossary term="runtime" displayTerm="run-time" >}} and every time the program is executed.


interpreter: A interpreter is a program that {{< glossary term="interpret" displayTerm="interprets" >}} other programs. Any error in the code is only caught during {{< glossary term="runtime" >}}.


# TODO add Internet-Protocol
ip-address: An Internet-Protocol Address is a **unique numerical label (e.g., 182.98.18.46) that identifies a device** connected to the {{< glossary term="internet" >}}, or a local network that uses the Internet Protocol for communication. Being geo-locatable, it's like a postal address for devices on the internet which helps in transmitting data efficiently between devices.


javascript: '
    JavaScript is a {{< glossary term="high-level" >}}, {{< glossary term="interpret" displayTerm="interpreted programming language" >}} that is **used to make {{< glossary term="webpage" displayTerm="webpages" >}} dynamic and interactive**. It is used to create responsive, interactive elements on web pages, such as pop-ups, animations, form validation, and more. JavaScript is executed on the {{< glossary term="client-side" >}} (browser) and can **interact with the {{< glossary term="DOM" >}} to update content, style, and structure of web pages**.

    {{< hr-span >}}

    Note: It has no relation to Java, they are two different languages.
'


json: '
    JavaScript Object Notation is a **lightweight data-interchange format** that is easy for humans to read and write, and easy for machines to {{< glossary term="parse" >}} and generate. It is used to transmit data between {{< glossary term="software-component" displayTerm="software components" >}}.

    {{< hr-span >}}

    Note: While it is derived from {{< glossary term="JavaScript" >}}, it is language-agnostic.
'


# add learn more !2
jwt: '{{< glossary term="JSON" >}} Web Token is an {{< glossary term="open-standard" >}} that defines a compact and {{< glossary term="self-contain" displayTerm="self-contained" >}} way for **transmitting and storing {{< glossary term="claim" displayTerm="information" >}} between parties that ensures data tamper-proofing**. It is commonly used for {{< glossary term="authentication" >}}.'


key-value: 'A key value pair is data that contains two related elements, a key and a value. The value is the information that is being stored or described that is related to the key, and the key is the unique identifier for that value. The key points to the value and is used to access the value. For example, the key-value pairs for describing myself can be "name: Sandesh", "age: 21", "city: Bangalore", etc.'


landing-page: A landing page is a **{{< glossary term="webpage" >}} that serves as the entry point for a {{< glossary term="website" >}} or a particular section of a website**. It informs visitors about the website's purpose, content, and offerings. It is designed to encourage visitors to take a specific action, such as signing up, downloading a resource, or making a purchase.


library: A library is a **collection of pre-written code that provides specific functionality to be used by other code**. Libraries are reusable and can save time and effort by allowing developers to use existing code rather than writing it from scratch. All the public {{< glossary term="function" displayTerm="functions" >}}/{{< glossary term="method" displayTerm="methods" >}} and their {{< glossary term="signature" displayTerm="signatures" >}} forms the {{< glossary term="API" >}} of the library.


lifo: Last In First Out is a **principle where the last data/element added to a collection is the first to be removed**. Only one end of the collection can be used. For example, with bangles stacked on your arm or with rings stacked on your finger, the last one you put on is the first one you take off.


low-level: Low-Level refers to **programming languages that are closer to {{< glossary term="machine-language" >}} and further from human language**, making it harder to read, write and understand for humans. It is closer to the hardware and provides more control over the computer's resources, making it more efficient and faster to execute than {{< glossary term="high-level" >}} languages. However, they are harder to learn and use. Lesser work is required to translate the code into {{< glossary term="machine-language" >}}. Examples include Assembly, C, etc.


mac-address: A Media Access Control Address is a hardware identifier that **uniquely identifies each device on a network**. Primarily, the manufacturer assigns it. They are often found on a device's network interface controller (NIC) card.


machine-language: Machine Language is the **most fundamental programming language and a computer can understand and execute it directly without needing some 'translation'**. Operates at hardware level i.e. consists of instructions (made up of {{< glossary term="binary-code"  displayTerm="binary code">}}) that corresponds to a specific operation the CPU can perform; thereby being specific to a computer's architecture.


markup-language: Markup Languages are **systems for annotating a document in a way that is syntactically distinguishable from the content text**. The annotations typically define how the document should be structured, formatted, or displayed. They are static and do not have any logic or programming capabilities. Examples include {{< glossary term="HTML" >}}, {{< glossary term="XML" >}}, etc.


memory-address: Memory in a computer is divided into {{< glossary term="contiguous" >}} blocks {{< glossary term="memory-unit" displayTerm="memory units" >}} (usually a {{< glossary term="bit" displayTerm="byte" >}}) each with a unique address. A memory address is this **unique identifier for a memory unit in the computer's memory**. When the data content in the memory is the address of another memory unit, it is called a {{< glossary term="pointer" >}}.


memory-stack: '
    The memory stack is a scratch space for {{< glossary term="thread" >}} of execution. It is a **{{< glossary term="static-allocation-memory" displayTerm="statically-allocated" >}} region of program memory that stores a {{< glossary term="stack" >}} of {{< glossary term="memory-stack-frame" displayTerm="frames" >}}**. Memory is allocated contiguously and grows/shrinks as {{< glossary term="function" displayTerm="functions" >}} are {{< glossary term="call" displayTerm="called" >}} and returned.

    {{< hr-span >}}

    Note: While it is an abstracted logical concept implemented by a programming language (all program memory is in RAM), it is smaller and faster to {{< glossary term="heap" >}}.
'


# TODO add term local variable
memory-stack-frame: A stack frame is a **{{< glossary term="data-structure" >}} that contains all the information about the execution of a {{< glossary term="function" >}}**. It includes the function's {{< glossary term="argument" displayTerm="arguments" >}}, local {{< glossary term="variable" displayTerm="variables" >}}, return address, and other information needed to resume a function after control returns from a {{< glossary term="call" displayTerm="called" >}} function. Each function call creates a new stack frame on the {{< glossary term="memory-stack" >}}.


memory-unit: Memory unit in a computer architecture is the **smallest addressable size of memory** i.e. the smallest size of data that can be read from or written to the memory. It is usually a {{< glossary term="bit" displayTerm="byte" >}} in most systems. Each memory unit has a unique {{< glossary term="memory-address" >}}. The memory unit is the basic building block of memory.


message-broker: A message broker is an **intermediary software that facilitates communication between different software systems**. It receives messages from one system and sends them to another system. It decouples the systems, so they don't need to know each other's details to share information. It ensures that the messages are delivered reliably and efficiently, even when the systems are not available at the same time.


metadata: Metadata is **data about data. It provides information about other data**. For example consider a .jpg file, it contains the image data and you could also view and even edit the metadata which includes information like name of the photographer, date and time the photo was taken, camera model, etc. **Every file has metadata associated with it.**


method: Methods are **{{< glossary term="function" displayTerm="functions" >}} associated with an {{< glossary term="object" >}}** i.e. defined in a {{< glossary term="class" >}}. It can **perform a specific task or operation on the object's {{< glossary term="state" >}}**.


module: A module represents **a distinct unit of code that serves a unique and specific purpose**, it's {{< glossary term="self-contain" displayTerm="self-contained" >}} and can be reused again and again. When people talk about things like {{< glossary term="package" displayTerm="packages" >}}, or {{< glossary term="library" displayTerm="libraries" >}}, they are also talking about "modules". It is used to mean "some self contained bit of code that does this one specific thing".


# TODO condense it and maybe use context-ing
namespace: Consider two people with the same name in a room, it would be confusing to call out their name. To avoid this, you could say "John from the marketing department" and "John from the sales department". This is what namespaces do in programming. They allow you to use the same name for different things without causing confusion and naming conflicts. For example, two {{< glossary term="library" displayTerm="libraries" >}} might have a {{< glossary term="function" >}} with the same name, but they can be distinguished by their namespace (e.g., com.example.library1.function() and com.example.library2.function()) so that you can use both in the same program. The reverse order of the organization domain name is a common way to create namespaces.


oauth: Open {{< glossary term="Authorization" >}} is an {{< glossary term="open-standard" >}} for **access delegation** that allows a user to grant a third-party application access to their account/application's resources or perform actions on behalf of them without them having to sharing their credentials to the third-party application. {{< hr-span >}} [Learn More]( {{% ref "/blogs/What-Is-OAuth-(2_0)-Definition-Use-Cases-and-How-it-Works" %}} ).


# TODO check repeating of 'abstract/concrete' with term instance
object: An object is a **real-world entity that has {{< glossary term="state" >}} and {{< glossary term="behavior" >}}**. While {{< glossary term="class" >}} is an abstract entity, an object is its concrete entity i.e. an {{< glossary term="instance" >}}. For example, a class "Car" can have states like color, model, speed, etc., and behaviors like start(), stop(), accelerate(), etc. To have an actual car, you need to create an object of the class with its unique data. Objects are the building blocks of {{< glossary term="OOP" >}}.


# TODO write polymorphism, abstraction, SOLID
oop: 'Object-Oriented-Programming is **a programming paradigm that is based on the concept of "{{< glossary term="object" displayTerm="objects" >}}"**. Real-World entities of a system are modeled as {{< glossary term="class" displayTerm="classes" >}} whose {{< glossary term="instance" displayTerm="instances" >}} communicate with each other to perform tasks. OOP include the concepts {{< glossary term="encapsulation" >}}, {{< glossary term="inheritance" >}}, {{< glossary term="polymorphism" >}}, and {{< glossary term="abstraction" >}} and principles like {{< glossary term="SOLID" >}}.'


open-source: Open-Source refers to **software that is freely available to use, modify, and distribute**. The {{< glossary term="source-code" >}} of open-source software is made available to the public, allowing anyone to inspect, modify, and improve it.


open-standard: An open-standard is a **publicly available set of guidelines or specifications** that are developed and maintained through a collaborative, consensus-driven and transparent process, maintained by a community of users and developers. It is **not proprietary** and can be implemented by anyone without restrictions. E.g. {{< glossary term="OAuth" >}} (IETF), {{< glossary term="JSON" >}} (ECMA), {{< glossary term="HTML" >}} (W3C), etc.


openid-connect: OpenID Connect is an **{{< glossary term="open-standard" >}} for {{< glossary term="authentication" >}}** that is built on top of {{< glossary term="OAuth" >}} 2.0, and provides an identity layer on top of it like basic profile information about the user (e.g., name, email, etc.). It allows {{< glossary term="Single-Sign-On" >}}.


override: Overriding in {{< glossary term="OOP" >}} is **a {{< glossary term="subclass" >}} providing its own implementation of a {{< glossary term="method" >}} that is already provided (i.e. {{< glossary term="inheritance" displayTerm="inherited" >}}) from its {{< glossary term="superclass" >}}**. The method has the same {{< glossary term="signature" >}} as that of the superclass and the subclass method can {{< glossary term="call" displayTerm="invoke" >}} the superclass's method using the **super** keyword.


package: A package is used to **provide a higher level, logical organization unit by grouping related {{< glossary term="module" displayTerm="modules" >}}/{{< glossary term="class" displayTerm="classes" >}}/{{< glossary term="interface" displayTerm="interfaces" >}} together** that provide a set of functionalities/tools. They provide {{< glossary term="namespace" >}} and are nestable. Often used to manage dependencies, and distribute, manage and reuse code.


parameter: A parameter is a **variable in a {{< glossary term="method" >}}/{{< glossary term="function" >}} definition** that is used to accept input values when the method/function is called. It is a placeholder for the actual value that will be passed to the method when it is invoked. Parameters are used to alter the behavior of the function/method, making it more flexible and reusable.


parallelism: Parallelism is the execution of multiple tasks simultaneously at a point of time.


parse: Parsing is the process of **analyzing a string of symbols** to determine its grammatical structure with respect to a given formal grammar. It is used in programming to convert data from one format to another, such as from a string to a {{< glossary term="data-structure" displayTerm="data structure" >}}. For example, parsing {{< glossary term="JSON" >}} string data into a {{< glossary term="JavaScript" >}} {{< glossary term="object" >}}, or parsing an {{< glossary term="HTML" >}} {{< glossary term="web-document" displayTerm="document" >}} into a {{< glossary term="DOM" >}} tree, etc.


path-parameter: Specifying {{< glossary term="url-path" displayTerm="URL-path" >}} manually for each resource is not feasible. Path parameters are **{{< glossary term="variable" displayTerm="variables" >}}/placeholders in the URL-Path that are replaced with actual values when the {{< glossary term="request" >}} is made**. They are used to pass data to the {{< glossary term="web-server" >}} in the URL. For example, in the URL path '/teams/{teamId}/players/{playerId}', teamId and playerId are path parameters parameter that can be replaced with an actual team and player IDs.


pointer: A pointer is **a {{< glossary term="variable" >}}/memory whose data content is a {{< glossary term="reference" >}}**. One of its uses is of it being lightweight because it does store the actual whole data, but only points to location of data.


port: A port is **a specific point of communication on a computer that allows other computers to connect and exchange information with it over a network**. Ports are identified by numbers, and each port is associated with a specific {{< glossary term="protocol" >}} or service. For example, port 80 is commonly used for HTTP traffic, and port 5432 is used for PostgreSQL database connections. It can be described as an internal address within a host computer that identifies a program or process.


process: A process is **a computer program that is loaded into memory (RAM) and is being executed**. It is an instance of a computer program that has its own memory space, resources, and state which other processes cannot access. Each process has a main {{< glossary term="thread" >}} and a process can have multiple threads. Processes are managed by the operating system.


# TODO add change examples when added to glossary
protocol: A protocol is **a set of rules and guidelines that dictate how participants (whether they are devices, {{< glossary term="software-component" displayTerm="software components" >}}, or users) in a system should behave, communicate, and interact with each other**. Examples include {{< glossary term="HTTP" >}}, {{< glossary term="SMTP" >}}, {{< glossary term="FTP" >}}, etc.


query-parameter: Query parameters are the **key-value pairs in the {{< glossary term="URL" >}}** query string that are used to pass data to the {{< glossary term="web-server" >}} in the URL for filtering or sorting the response resources. They are separated from the {{< glossary term="URL-path" >}} by a question mark (?) and from each other by an ampersand (&). For example, in the URL '/search?query=programming&sort=latest', query and sort are query parameters.


# TODO add DoS term
rate-limit: Rate-Limiting is a **restriction on the number of {{< glossary term="request" displayTerm="requests" >}}** a {{< glossary term="client" >}} (user or application) can make to a {{< glossary term="server" >}} within a defined time frame. It is used to prevent abuse, protect against denial-of-service attacks, and ensure fair usage of resources.


redis: Redis is an **{{< glossary term="open-source" >}}, {{< glossary term="in-memory" >}} {{< glossary term="data-structure" displayTerm="data structure " >}} store** that can be used as a {{< glossary term="database" >}}, {{< glossary term="cache" >}}, and {{< glossary term="message-broker" displayTerm="message-broker" >}} . It largely works with the {{< glossary term="data-type" >}} String and collections of strings like Lists, Sets, Sorted Sets, Hashes, etc. Each data is stored as a {{< glossary term="key-value" >}} pair which supports expiration (automatically deleted after a set time).


reference: A reference is a **type of data value that is a {{< glossary term="memory-address" >}} of another value/data** i.e. it indicates where some other data is stored. As it points to some other data, it is used to access that data. A variable/memory that stores a reference is called a {{< glossary term="pointer" >}}.


refresh-token: An {{< glossary term="Access-Token" >}} is short lived for security, meaning on expiry the user will have to {{< glossary term="authentication" displayTerm="re-authenticate" >}}. Refresh-Token is string of alphanumeric characters that can be used to be issued with a new Access Token after the current Access Token expires. Thus **it rotates the Access Token without the user having to re-authenticate**.


request: When a {{< glossary term="frontend" >}}/{{< glossary term="client" >}} needs to avail some resources/services like when it needs data or wants to perform an operation, it must ask the {{< glossary term="backend" >}}/{{< glossary term="server" >}} to do so. **This asking is called a request, often over the network**. The server processes the request and sends back a {{< glossary term="response" >}}.


response: When a {{< glossary term="backend" >}}/{{< glossary term="server" >}} receives a {{< glossary term="request" >}} for some resource or service from a {{< glossary term="frontend" >}}/{{< glossary term="client" >}}, it figures out what the client wants, processes the request and answers back to the client with the result. **This answer is called a response**. The response typically contains the requested data or information, along with a status code indicating the success or failure of the request.


request-response: Request-Response is **a common communication pattern/{{< glossary term="protocol" >}}** in which one system ({{< glossary term="client" >}}) **sends a {{< glossary term="request" >}}** for some data to another system ({{< glossary term="server" >}}), and the second system **{{< glossary term="response" displayTerm="responds" >}} to the request** by sending back the requested data.


runtime: Runtime is the **period during which a program is running** i.e. it is in execution/operation and is performing its tasks. The runtime of a program starts when it begins executing and ends when it is terminated.


same-origin: Same-Origin refers to **{{< glossary term="request" displayTerm="requests" >}} made from one {{< glossary term="website" >}} to the same website**, specifically, when the {{< glossary term="web-origin" displayTerm="origin" >}} of the {{< glossary term="client" >}} ({{< glossary term="web-document" displayTerm="document" >}} or {{< glossary term="web-script" displayTerm="script" >}} loaded by one origin) making the request and the origin of the {{< glossary term="web-server" displayTerm="server" >}} providing the requested resource is same. E.g. 'https://example.com' making a request to 'https://example.com/static/image.jpg'.


scope: Scoping is **determining and controlling which parts of a particular computer program (e.g., {{< glossary term="variable" displayTerm="variables" >}}, {{< glossary term="function" displayTerm="functions" >}}, etc.) are accessible and 'visible' to which other parts**, in the {{< glossary term="source-code" >}}. That is, defining the boundaries of where a particular piece of code is valid to be used, in the source-code.


self-contain: Something is self-contained if it is **independent and complete on its own**, without needing external components/resources to function. Though it may still interact with or expose parts of itself to other components.


# server <- server-side <- backend
server: A server is a **computer program or a device that provides functionality/services to other programs or devices**, known as {{< glossary term="client" displayTerm="clients" >}}, by processing their {{< glossary term="request" displayTerm="requests" >}} and {{< glossary term="response" displayTerm="responding" >}} with the result. These devices are typically dedicated to serving the needs of other programs or users, therefore being powerful machines which lack output devices like a monitor, keyboard, etc.


server-process: A server-process is **a program that runs in the background** on a computer and **binds to a specific {{< glossary term="port" >}}**, **listening for incoming {{< glossary term="request" displayTerm="requests" >}} from a {{< glossary term="client" >}}** over a network. It processes these requests and sends back {{< glossary term="response" displayTerm="responses" >}} to the clients. E.g., a {{< glossary term="http-server" >}}, {{< glossary term="dbms-server" >}}, etc. These processes usually run on a {{< glossary term="server"  displayTerm="server-machine">}} .


# backend -> server-side -> server
server-side: Server-Side refers to **things that happen on the {{< glossary term="server" >}}**, e.g., interacting with {{< glossary term="database" displayTerm="databases" >}}, processing of {{< glossary term="request" displayTerm="requests" >}}, etc.


# TODO try to condense
server-side-rendering: Server-Side Rendering is the process of **creating {{< glossary term="webpage" displayTerm="webpages" >}} on a {{< glossary term="webapp-server" >}} when it receives a {{< glossary term="request" >}}** (webpage yet to be created at this point) from {{< glossary term="client" displayTerm="clients" >}} (browsers) by fetching and loading its content and data during processing of the request and then {{< glossary term="response" displayTerm="sending" >}} the fully rendered page to the client. Suitable for content that changes frequently and requires dynamic data like social media feeds, e-commerce sites, etc.


signature: Signature is the **name, parameters (number, type, order), and return type of a {{< glossary term="function" >}}/{{< glossary term="method" >}}**. It is a unique identifier for a function/method in a {{< glossary term="namespace" >}}.


simplex: Simplex is a **communication channel that allows data to flow in only one direction**. Data can only be sent at one end and only be received at the other end. Examples include radio, television, etc.


single-page-application: A Single Page Application (SPA) is a **{{< glossary term="webapp" >}} that loads a single {{< glossary term="HTML" >}} {{< glossary term="webpage" displayTerm="page" >}}** and dynamically updates the content **instead of {{< glossary term="request" displayTerm="requesting" >}} new webpages** as the user interacts with the application using {{< glossary term="client-side-rendering" >}}. SPAs provide a more responsive and seamless user experience by reducing the need to reload the entire page for each interaction.


single-sign-on: Single Sign-On (SSO) is an {{< glossary term="authenticate" displayTerm="authentication" >}} process that **allows a user to access multiple applications with a single set of login credentials**.


sld: Second-Level Domain is the part of a {{< glossary term="domain" >}} that comes to the left of the {{< glossary term="TLD" >}}. It is the **most recognizable part of the {{< glossary term="domain" >}} name that is used to identify the {{< glossary term="website" >}}** which is the organization that registered the domain name. For example, in the domain name "example.com", "example" is the SLD.


smtp: Simple Mail Transfer Protocol is a standard {{< glossary term="protocol" >}} **used to send and receive email messages over the {{< glossary term="internet" >}}**. SMTP is a text-based protocol that operates on {{< glossary term="port" >}} 25. It is a push protocol, meaning that the server sends the message to the client.


socket: A socket is an **{{< glossary term="IP-Address" >}} + {{< glossary term="Port" >}}**, also known as a communication endpoint. It is used to establish a connection between two computers on a network to exchange data.


software-component: Software components include **{{< glossary term="server-process" displayTerm="server-processes" >}}, client applications (e.g. a website/browser, mobile app, desktop app, etc.), or {{< glossary term="library" displayTerm="libraries" >}}/{{< glossary term="module" displayTerm="modules" >}}** that provides specific functionality to a software system.


source-code: Source code is the **raw textual human-readable code** of a computer program written by a programmer in a programming language. Computers do not understand this version of code, thus it needs to be translated through the process of {{< glossary term="compile" displayTerm="compilation" >}}/{{< glossary term="interpret" displayTerm="interpretation" >}} into {{< glossary term="machine-language" >}} before it can be executed.


stack: 'A stack is a **{{< glossary term="data-structure" >}} that stores data in a {{< glossary term="LIFO" >}} (Last In First Out) order**. It has two main operations: push (adds an element to the top of the stack) and pop (removes the top element from the stack). You can only access the top element of the stack.'


state: State is the **characteristics/attributes/properties of an {{< glossary term="object" >}}** which represents what an object is, what it looks like and defines 'Has-A' relationships ({{< glossary term="composition" >}}). It is the data (stored in {{< glossary term="variable" displayTerm="variables" >}}) that an object holds at a given point in time. It defines the object's {{< glossary term="behavior" >}}. With a dog as an example object, its state would include its name, breed, age, color, etc.


# add learn more - !3
static: A static **{{< glossary term="class-member" >}} is one that belongs to the {{< glossary term="class" >}} itself**, rather than to the {{< glossary term="instance" displayTerm="instances" >}} of the class. It can be accessed without creating an instance of the class and is shared among all instances of the class.


static-allocation-memory: "
    Static Allocation of Memory is a **memory allocation technique where memory is allocated at {{< glossary term=compile-time >}}**. The size of the memory block is fixed and cannot be changed during the program's execution.

    {{< hr-span >}}

    Note: While size is determined before the program runs, actual memory isn't assigned until the program starts executing
"


static-site-generation: Static Site Generation is the process of **creating {{< glossary term="webpage" displayTerm="webpages" >}} by loading its content and data at build-time** before {{< glossary term="client" displayTerm="clients" >}} (browsers) {{< glossary term="request" >}} it. The webpage is generated once and served as-is to all clients without any additional processing. Suitable for content that doesn't change frequently and is static like blogs, portfolios, {{< glossary term="landing-page" displayTerm="landing pages" >}}, etc.


static-site-generator: A Static Site Generator is a **software tool that generates static {{< glossary term="webpage" displayTerm="webpages" >}} from source files (e.g., Markdown, {{< glossary term="HTML" >}}, etc.)  through {{< glossary term="static-site-generation" displayTerm="SSG" >}}**. Examples include Jekyll, Hugo, Gatsby, etc.


statically-typed: In statically-type programming languages, the **{{< glossary term="data-type" displayTerm="data type" >}} of a {{< glossary term="variable" >}} is known at {{< glossary term="compile-time" displayTerm="compile time" >}}**. The data type of a variable is explicitly declared when the variable is created, and it cannot change during the program's execution. Examples include C, Java, C++, etc.


style-sheet: A style sheet is a **file that contains {{< glossary term="style-sheet-language" displayTerm="style rules" >}}**.


style-sheet-language: A style sheet language **describes the presentation or formatting of a document** written in a {{< glossary term="markup-language" displayTerm="markup language" >}} like {{< glossary term="HTML" >}}, typically **defining how elements should be displayed or rendered across different media**.


subclass: SubClass/ChildClass is a **{{< glossary term="class" >}} that **{{< glossary term="inheritance" displayTerm="inherits" >}} {{< glossary term="state" displayTerm="properties" >}} and {{< glossary term="behavior" displayTerm="behaviors" >}}** from another class**, called a {{< glossary term="superclass" displayTerm="superclass/ParentClass" >}}.


subdomain: A subdomain is **a different site that is part of the main {{< glossary term="domain" >}} ({{< glossary term="SLD" >}}+{{< glossary term="TLD" >}})**. For example, blog.example.com and shop.example.com are subdomains of example.com. Websites often redirect all subdomains to a single  subdomain (commonly 'www' or empty), but they can also be used to create separate sites or sections of a site with different content or functionality.


superclass: SuperClass/ParentClass is a **{{< glossary term="class" >}} that provides {{< glossary term="state" displayTerm="properties" >}} and {{< glossary term="behavior" displayTerm="behaviors" >}}** to another class, called a {{< glossary term="subclass" displayTerm="SubClass/ChildClass" >}} through {{< glossary term="inheritance" >}}.


synchronous: Synchronous is to do something and wait for it to finish before moving on to the next thing. In programming, it means that the program will execute in a sequential order where it will **wait for an instruction to complete before moving on to the next task**. It is {{< glossary term="blocking" >}} in nature.


tcp: Transmission Control Protocol is a **connection-oriented {{< glossary term="protocol" >}}** (forms a connection between devices before transferring data) **that provides reliable, ordered, and error-checked delivery of data between devices over a network**. It ensures that ALL data packets are delivered to the destination in the same order they were sent and that they are error-free. TCP is a {{< glossary term="tcp/ip-transport" displayTerm="transport layer protocol" >}} in the {{< glossary term="TCP/IP" >}} suite.


# TODO refine all tcp/ip
tcp/ip: '
    Transmission Control Protocol/Internet Protocol is a framework or a suite of {{< glossary term="protocol" displayTerm="protocols" >}} that define how computers communicate and share data with each other over the {{< glossary term="internet" >}} or a network in a reliable and efficient manner. It consists of five layers: {{< glossary term="tcp/ip-Physical" displayTerm="Physical" >}}, {{< glossary term="tcp/ip-Data-Link" displayTerm="Data-Link" >}}, {{< glossary term="tcp/ip-Network" displayTerm="Network" >}}, {{< glossary term="tcp/ip-Transport" displayTerm="Transport" >}}, and {{< glossary term="tcp/ip-Application" displayTerm="Application" >}}.

    {{< hr-span >}}

    Note: TCP/IP is a misnomer, it is actually a suite of protocols that also includes {{< glossary term="UDP" >}}.
'


tcp/ip-application: The Application Layer is the **top-most layer of the {{< glossary term="TCP/IP" >}} model** where the data unit is called a message. It is the **interface between the user's applications and the underlying network**. It manages how data is presented and accessed by the user. It includes protocols like {{< glossary term="HTTP" >}}, {{< glossary term="FTP" >}}, {{< glossary term="SMTP" >}}, etc.


tcp/ip-data-link: The Data Link Layer is the **second layer of the {{< glossary term="TCP/IP" >}} model** where the data unit is called a frame. It adds a header containing the hardware address ({{< glossary term="MAC-Address" >}}) of the source and destination computers. It is responsible for **transferring frames from the source to the destination across the same network**. It provides error detection and correction.


tcp/ip-network: The Network Layer is the **third layer of the {{< glossary term="TCP/IP" >}} model** where the data unit is called a packet. It adds a header containing the {{< glossary term="IP-Address" >}} of the source and destination computers. It is responsible for **routing packets from the source to the destination across multiple networks**. It finds the best path for data transfer by using routing algorithms to choose the fastest and most reliable route.


tcp/ip-physical: The Physical Layer is the **bottom-most layer of the {{< glossary term="TCP/IP" >}} model** where the data unit is called a {{< glossary term="frame" >}} even though it is represented in {{< glossary term="bit" displayTerm="bits" >}}. It is responsible for **transmitting raw data bits over a physical medium** in {{< glossary term="analog" >}} form between the network nodes.


tcp/ip-transport: The Transport Layer is the **fourth layer of the {{< glossary term="TCP/IP" >}} model** where the data unit is called a segment ({{< glossary term="TCP" >}}) or a datagram ({{< glossary term="UDP" >}}). It adds a header containing the {{< glossary term="port" >}} numbers of the source and destination computers. It breaks down your data into chunks, called packets and numbers them so they can be reassembled in the correct order. It is responsible for **end-to-end communication between the source and destination computers**.


# add learn more - !1
thread: A thread is a separate, single **sequence of execution of instructions within a {{< glossary term="process" >}}**. All {{< glossary term="process" displayTerm="processes" >}} have at least one thread, known as the main thread. Threads have their own {{< glossary term="memory-stack" displayTerm="stack" >}} but share the same {{< glossary term="memory-heap" displayTerm="heap" >}}. Multiple threads of a process can be run {{< glossary term="concurrency" displayTerm="concurrently" >}} or {{< glossary term="parallelism" displayTerm="parallelly" >}}.


tld: Top-Level Domain is the last part of a {{< glossary term="domain" >}} name, such as .com, .org, .net, .edu, etc. It **helps to classify and communicate the purpose, owner, or geographical area of a website**. For example, a ".com" TLD indicates a commercial website, while a ".edu" TLD indicates an educational institution.


# TODO maybe add term integrity
tls/ssl: "Transport Layer Security (formerly known as Secure Sockets Layer) is a **{{< glossary term=protocol >}} that provides secure communication over a computer network** by {{< glossary term=encryption displayTerm=encrypting >}} the data that is transmitted between two systems.  It generally provides, to varying degrees, three useful things: data confidentiality, {{< glossary term=authentication >}}, and data integrity."


transfer: Transfer is the exchange of data between the {{< glossary term="client" >}} and {{< glossary term="server" >}}.


udp: User Datagram Protocol is a **connectionless {{< glossary term="protocol" >}}** (no connection formation between devices before transferring data) that operates on the {{< glossary term="tcp/ip-transport" displayTerm="transport layer" >}} of the {{< glossary term="TCP/IP" >}} model. It is used for **fast transmission of data where reliability is not critical**, some data loss or misorder of packet arrival is acceptable.


ui: User Interface is the **visual elements of a software application that users interact with**, such as buttons, menus, forms, and other controls. It is designed to be intuitive, user-friendly, and responsive to user input.


unicode: "{{< glossary term=ASCII >}} is limited to representing only 128 characters, which is not enough to represent all the characters in the world's languages (150,000+). Unicode is an **international {{< glossary term=character-encoding-standard >}} whose Character Set includes all characters in all languages**, including emojis, mathematical symbols, etc. Its {{< glossary term=Character-Encoding-Scheme >}} include the {{< glossary term=UTF >}} family."


uri: A Uniform Resource Identifier is a text string that **identifies a particular {{< glossary term="internet-resource" displayTerm="resource" >}}** on the internet (by location or name) and is used to access that resource. URIs include {{< glossary term="URL" displayTerm="URLs" >}} and {{< glossary term="URN" displayTerm="URNs" >}}.


url: A Uniform Resource Locator is a text string that **{{< glossary term="URI" displayTerm="identifies" >}} a particular {{< glossary term="internet-resource" displayTerm="resource" >}} on the internet by its location**. In the context of the {{< glossary term="web" >}}, it is called "web address" or "link". It consists of a {{< glossary term="protocol" >}}, a {{< glossary term="domain" >}} name, a {{< glossary term="url-path" displayTerm="path" >}} to the resource and {{< glossary term="query-parameter" displayTerm="query parameters" >}}. E.g., https://example.com/tutorials/what-is-a-url?lang=en specifies the location of a tutorial on URLs in English on the example.com website and uses the {{< glossary term="HTTPS" >}} protocol.


url-path: A URL Path is the part of a {{< glossary term="URL" >}} that **specifies the location of an {{< glossary term="internet-resource" >}}** on a {{< glossary term="website" >}}. It can contain {{< glossary term="path-parameter" displayTerm="path parameters" >}}. For example, in the URL https://example.com/tutorials/what-is-a-url, "/tutorials/what-is-a-url" is the URL path.


urn: A Uniform Resource Name is a text string that **{{< glossary term="URI" displayTerm="identifies" >}} a particular {{< glossary term="internet-resource" displayTerm="resource" >}} on the internet by its name**. It is globally unique within in a particular {{< glossary term="namespace" >}} and persistent, which does not specify its location or whether it exists. For example, 'urn:isbn:0451450523' identifies a book by its ISBN number.


utf: Unicode Transformation Format is a **{{< glossary term="character-encoding-scheme" >}} of the {{< glossary term="unicode" >}} standard**. {{< glossary term=UTF-8 >}}, {{< glossary term=UTF-16 >}}, and {{< glossary term=UTF-32 >}} are the most commonly used in the UTF family.


utf-16: '{{< glossary term="UTF" >}}-16 is a **variable-width character {{< glossary term="encode" displayTerm="encoding" >}} using one or two double-{{< glossary term="bit" displayTerm="byte" >}} code units**. It is used in major operating systems and environments, including Windows and Java.'


utf-32: '{{< glossary term="UTF" >}}-32 is a **fixed-width character {{< glossary term="encode" displayTerm="encoding" >}} that uses a quadruple-{{< glossary term="bit" displayTerm="byte" >}} code unit**. It is used in environments where fixed-width encoding is required, such as in-memory representation of text data.'


utf-8: '{{< glossary term="UTF" >}}-8 is a **variable-width character {{< glossary term="encode" displayTerm="encoding" >}} of {{< glossary term="unicode" >}} that uses one to four single-{{< glossary term="bit" displayTerm="byte" >}} code units**. It is the most commonly used character encoding on the {{< glossary term="web" >}}. One byte is used for {{< glossary term="ASCII" >}} characters, two bytes for most Latin characters, and three or four bytes for less common characters.'


ux: User Experience is the **overall experience of a person using a product** such as a website or computer application, especially in terms of how easy or pleasing it is to use.


# add learn more - !1
variable: A variable is a **named storage location in a computer's memory that holds a value**. It is used to store data that can be referenced and manipulated in a program. Variables have a {{< glossary term="data-type" >}} that determines what kind of data they can hold, and a name that is used to refer to them in the program.
# When writing a program, often you will want to store data in memory for later use. Instead of explicitly using the {{< glossary term="memory-address" >}} to refer/access the data, you can give a descriptive name of your choice so that it gets associated with the data (alias) and allows you to access/refer to it through the name. This name is called a variable. So, basically it is a container for storing data values by being an alias to the memory location.


web: The World Wide Web, a subset of the {{< glossary term="internet-resource" displayTerm="internet resources" >}}, is an information space of {{< glossary term="web-document" displayTerm="documents" >}} and other web resources that are identified by {{< glossary term="URI" displayTerm="URIs" >}}, interlink with {{< glossary term="hypertext" displayTerm="hyperlinks" >}}, and can be accessed via the {{< glossary term="internet" >}}. It is a **system of interlinked documents accessed via the internet**.


web-component: Web components/content include webpages and its {{< glossary term="webpage-component" displayTerm="components" >}}.


web-document: A Web Document is a {{< glossary term="HTML" >}} file containing textual or multimedia content that is displayed in a web browser. While being rendered by a web browser, it makes {{< glossary term="HTTP" >}} {{< glossary term="request" displayTerm="requests" >}} to fetch other resources embedded in the document like images, {{< glossary term="style-sheet" displayTerm="stylesheets" >}}, {{< glossary term="web-script" displayTerm="scripts" >}}, etc. It is the **basic unit of information on the {{< glossary term="Web" displayTerm="World Wide Web" >}}** and makes up a {{< glossary term="webpage" >}}.


# TODO condense it
web-origin: Every {{< glossary term="web-component" >}} delivered to a {{< glossary term="client" >}} has an origin which is defined by **the {{< glossary term="protocol" displayTerm="scheme" >}} (e.g., {{< glossary term="HTTP" >}}, {{< glossary term="HTTPS" >}}), {{< glossary term="domain" >}} (e.g., example.com), and {{< glossary term="port" >}} (e.g., 5432) of the {{< glossary term="URL" >}}** that was used to access the said web-component. If the port is not specified, it defaults to the standard ports used by the scheme (e.g., 80 for HTTP, 443 for HTTPS). For example, the origin of the URL 'https://example.com:5432/path/to/resource' is 'https://example.com:5432' where 'https' is the scheme, 'example.com' is the domain, and '5432' is the port and the origin of the url 'https://example.com/path/to/resource' is 'https://example.com' where 'https' is the scheme and 'example.com' is the domain and the port defaults to 443 (HTTPS).


web-script: A Script is a {{< glossary term="JavaScript" >}} file that contains code and is linked by a {{< glossary term="web-document" >}} which is executed by the browser after the document loads the script through {{< glossary term="HTTP" >}}. It can make {{< glossary term="AJAX-request" displayTerm="AJAX-requests" >}}, manipulate the {{< glossary term="DOM" >}}, etc.


web-server: A {{< glossary term="server" >}} that **hosts {{< glossary term="web-component" >}} files, and an {{< glossary term="HTTP-server" >}}**. Web servers are accessed through the {{< glossary term="dns" displayTerm="domain names" >}} of the {{< glossary term="website" displayTerm="websites" >}} they host.


webapp: A Web Application is a **software application that is accessible through a browser over the {{< glossary term="internet" >}}**. It is designed to provide interactive and dynamic user experiences. Web applications can be simple, like a todo list, or complex, like a social media platform.


#TODO might want to add term 'dynamic'
webapp-server: A Web Application Server is a **{{< glossary term="server" >}} that hosts and runs {{< glossary term="webapp" displayTerm="webapps" >}}**. It uses a {{< glossary term="framework" displayTerm="software-framework" >}} that provides an environment for web applications to run, including services such as access to the [HTTP request and response]( {{% ref "/blogs/what-are-http-and-https-protocols/#how-does-http-work" %}} ) objects, {{< glossary term="database" >}} connectivity, OS file system, etc. It enables {{< glossary term="server-side-rendering" >}}.


webpage: A webpage is a **{{< glossary term="web-document" displayTerm="document" >}} that is displayed in a web browser** when you visit a {{< glossary term="website" >}} through an {{< glossary term="URL" >}}. It is written in {{< glossary term="HTML" >}} and may contain other {{< glossary term="webpage-component" displayTerm="resources" >}}. Related webpages make up a website, sharing a common {{< glossary term="domain" >}} name.


webpage-component: Webpage components are the **files that make up a {{< glossary term="webpage" >}}** which are the {{< glossary term="HTML" >}} files, {{< glossary term="CSS" >}} files, {{< glossary term="JavaScript" >}} files, images, videos, etc.


website: A website a **collection of related {{< glossary term="webpage" displayTerm="webpages" >}} that are typically identified by a common {{< glossary term="domain" >}} name** and are published/hosted on at least one {{< glossary term="web-server" >}}. Websites are accessible over the {{< glossary term="internet" >}} and are used to provide information, services, and resources to users.


websocket: WebSockets is a communication {{< glossary term="protocol" >}} that **provides {{< glossary term="full-duplex" >}} communication channels for exchanging data between a {{< glossary term="client" >}} and a {{< glossary term="server" >}} over a single, long lasting {{< glossary term="TCP" >}} connection**. WebSockets keep the connection open, allowing real-time data to flow both ways without delays. This makes WebSockets ideal for applications that need instant updates, such as chat apps, live sports scores, and online multiplayer games.


xml: Extensible {{< glossary term="Markup-Language" >}} is a self-descriptive language that allows you to define your own tags and attributes. It **describes data and is used to store and transport data**.


# TODO add learn more - !1
xss: Cross-Site Scripting is a type of {{< glossary term="web" >}} security vulnerability that **allows attackers to inject malicious {{< glossary term="web-script" displayTerm="scripts" >}} into {{< glossary term="webpage" displayTerm="webpages" >}} viewed by other users** which when executed by the browser can steal sensitive information, deface the {{< glossary term="website" >}}, redirect users to malicious sites, etc.
