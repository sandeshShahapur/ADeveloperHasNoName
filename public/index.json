[{"content":"You are familiar with using browsers to access websites and you might have seen URL\rs starting with http:// or https://. When you type a URL like http://example.com in your browser\u0026rsquo;s address bar and press Enter, you are then presented with the website\u0026rsquo;s content. How does this happen?\nFirst, where does the browser get this content from? From a Web-Server\r. Which Web-Server? The one whose IP-Address\ris associated with the domain name example.com which is resolved by the DNS\r, say for example 1.1.1.1.\nNow, the browser just can\u0026rsquo;t ask \u0026lsquo;Hey 1.1.1.1, I want something\u0026rsquo;, it needs to be able to ask in a way that the Web-Server understands. This is where the HTTP Protocol comes into play.\nWhat is HTTP? HTTP stands for HyperText\rTransfer\rProtocol\r. It is the format that client\rs (browsers) and server\rs (Web-Servers) use to communicate website components like HTML\r, CSS\r, JavaScript\rfiles, images, etc. with each other over the internet\r.\nIt is one of the Application Layer Protocols in TCP/IP, which means it is responsible for the communication between software applications on the network.\nSo, in a nutshell, HTTP is the language that the client and server use to exchange web components over the internet.\nHow Does HTTP Work? HTTP works in a client-server model.\nFirst, the client sends a request to the server. Let\u0026rsquo;s look at how this request looks:\nRequest Line: Contains the method, the URL, and the HTTP version. The method specifies the action to be performed on the resource (GET, POST, PUT, DELETE, etc.). The URL specifies the location of the resource. The HTTP version specifies the version of the HTTP protocol being used. Headers: Contains additional information about the request like the type of content the client can accept (text/html, application/json, etc.), the type of content the client is sending (application/x-www-form-urlencoded, multipart/form-data, etc.), the type of encoding used (gzip, deflate, etc.), and more. Body: Contains the data being sent to the server. This is optional and is used in POST, PUT and PATCH requests. Next, the server processes the request and responds with the requested content. Let\u0026rsquo;s look at how this response looks:\nStatus Line: Contains the HTTP version, the status code (200 for success, 404 for not found, 500 for server error, etc.), and a status message. Headers: Contains additional information about the response like the type of content being sent (text/html, application/json, etc.), the length of the content, the type of encoding used (gzip, deflate, etc.), and more. Body: Contains the data being sent back to the client. This can be HTML content, JSON\rdata, images, etc. One of the key features of HTTP is that it is a stateless protocol, which means each request is independent of the previous one. The server does not maintain any information about the client\u0026rsquo;s previous requests. To maintain state between requests, technologies like cookies and sessions are used.\nIn this way, HTTP enables the client and server to communicate effectively over the internet.\nHTTP Methods Every HTTP request contains a method that specifies the action to be performed on the resource. Some common HTTP methods are:\nGET: Used to retrieve data from the server. The data is sent in the URL. POST: Used to submit data to the server. The data is sent in the body of the request. PUT: Used to update data on the server. The data is sent in the body of the request. DELETE: Used to delete data on the server. The data is sent in the URL. PATCH: Used to partially update data on the server. The data is sent in the body of the request. HEAD: Similar to GET but only returns the headers OPTIONS: Used to check what methods are allowed on a resource HTTP Status Codes Every HTTP response contains a status code that indicates the status of the request. Range of status codes are divided into 5 categories:\n1xx: Informational responses. Example: 100 Continue, 101 Switching Protocols. 2xx: Success responses. Example: 200 OK, 201 Created, 204 No Content. 3xx: Redirection responses. Example: 301 Moved Permanently, 302 Found, 304 Not Modified. 4xx: Client error responses. Example: 400 Bad Request, 401 Unauthorized, 404 Not Found. 5xx: Server error responses. Example: 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable. These codes help developers and clients identify the result of the request, enabling effective debugging.\nIdempotent Methods Some HTTP methods are considered idempotent, which means that making the same request multiple times has the same effect as making it once. This property is useful in scenarios where requests can be retried without causing unintended side effects. Some idempotent methods are:\nGET: Retrieving data multiple times has the same effect. PUT: Updating data multiple times has the same effect. DELETE: Deleting data multiple times has the same effect. HEAD: Retrieving headers multiple times has the same effect. OPTIONS: Checking allowed methods multiple times has the same effect. Post and Patch methods are not idempotent as making the same request multiple times can have different effects.\nHTTP Versions HTTP has evolved over the years, with different versions introducing new features and improvements. Some of the major versions are:\nHTTP/0.9: The first version of HTTP, introduced in 1991. It was a simple protocol that allowed clients to request a single file from a server. HTTP/1.0: Introduced in 1996, it added support for multiple types of data, including images, audio, and video. It also introduced status codes and headers. HTTP/1.1: Introduced in 1999, it is the most widely used version of HTTP. It introduced persistent connections, pipelining, and improved caching. HTTP/2: Introduced in 2015, it is a major revision of the HTTP protocol. It introduced features like multiplexing, header compression, and server push to improve performance. HTTP/3: Introduced in 2020, it is the latest version of HTTP. It is based on the QUIC protocol and aims to improve performance and security. Each version of HTTP builds on the previous one, adding new features and improvements to make the protocol more efficient and secure.\nHTTPS HTTP is a text-based protocol, which means that data sent over HTTP requests and responses is not encrypted. This means that anyone who intercepts the data can read it easily as plain text.\nConsider the scenarios where you are logging into your bank account over an unencrypted HTTP connection. If someone intercepts the data, they can read your username and password, compromising your account. Or consider when you are entering your credit card details on an e-commerce website, if the HTTP connection is not encrypted, your credit card information can be stolen.\nTo address this security concern, HTTPS was introduced. HTTPS stands for HyperText Transfer Protocol Secure. It is the secure version of HTTP that encrypts the data sent between the client and server, making it difficult for attackers to intercept and read the data. HTTPS uses the SSL/TLS protocol to encrypt the data, ensuring that sensitive information like passwords, credit card details, and personal information is protected.\nWhen you visit a website that uses HTTPS, you will see a padlock icon in the address bar of your browser, indicating that the connection is secure. It is important to use HTTPS on websites that handle sensitive information to protect user data from interception and theft.\nConclusion HTTP/S is the backbone of the internet, enabling communication between clients and servers. Understanding how HTTP works, its methods, status codes, versions, and security features is essential for web developers to build secure and efficient web applications. By following the principles of HTTP, developers can create fast, reliable, and secure web experiences for users around the world.\n","permalink":"http://localhost:1313/blogs/what_are_http_and_https_protocols/","summary":"An in-depth look at what the HTTP protocol is, how it works, its methods, status codes, versions, and security features. Learn how HTTP enables communication between clients and servers over the internet.","title":"What are HTTP and HTTPS Protocols?"},{"content":"When you visit a website, you might have noticed a message that says, \u0026ldquo;This website uses cookies to ensure you get the best experience on our website\u0026rdquo; or have received a prompt to accept cookies. Before understanding what these cookies are and why they are used, let us look at the context around cookies.\nWhy Cookies? Browsers use the HTTP protocol to communicate with a web-server\rfor requesting web pages, images, videos, and other resources. HTTP is a stateless protocol, meaning that each request is independent of the previous one, and the server does not maintain any information about your interactions with the website. However, websites often need to remember user-specific information to provide a personalized experience like remembering your login status, preferences, shopping cart items, and more.\nThere are few options for storing data on the client\r(browser) like:\nCookies: Small pieces of data. Local Storage: A larger storage area. Session Storage: A storage area that stores data for the duration of the page session. What Are Cookies? Cookies are small pieces of data stored on your browser by websites you visit. They have a name and a value, and they can also have additional attributes. They are used to store user-specific information like login status, preferences, shopping cart items, and more.\nWhy/When to use Cookies over Local/Session Storage? Cookies provide the following advantages over Local/Session Storage:\nCookies are sent with every request: Cookies are sent with every request to the server, allowing the server to remember user-specific information. Local/Session Storage is not sent with every request. Expiration and Path: Cookies can have an expiration date and a path, allowing them to be stored for a specific duration and accessed only on specific paths. Local/Session Storage either persists forever (Local Storage) or is cleared when the page session ends (Session Storage). Security: Cookies can have attributes that enhances security whereas Local/Session Storage does not have these security features. How Do Cookies Work? When you visit a website, the server sends a response to your browser with the web page content and a set of instructions to create cookies. Your browser stores these cookies and sends them back to the server with every subsequent request (given the cookie\u0026rsquo;s path matches the request path) you make to the website.\nNote: In the case when a website uses different domains for its frontend\rand backend\r, cookies are likely not stored by the frontend domain (the website you visit), but by the backend domain.\nThus every cookie is associated with only one domain which is the the domain of the web server that set the cookie.\nAs Cookies are associated with a specific domain and path on the website, cookies created by one website cannot be accessed by another website. For example, cookies created by example.com cannot be accessed by anotherexample.com.\nNote: If the frontend and backend are on different domains, and the backend sets a cookie, the frontend cannot access it through document.cookie as it is on a different domain.\nWhy Are Cookies Used? Cookies serve several purposes on the web:\nSession Management: Cookies are used to manage user sessions on websites. They help websites remember your login status, shopping cart items, and other session-related information. Tracking and Analytics: Cookies are used for tracking user behavior on websites. They help website owners understand how users interact with their site, which pages are popular, and more. Advertising: Cookies are used for targeted advertising. They help advertisers show relevant ads to users based on their browsing history and interests. Cookie Attributes Cookies can have several attributes that define their behavior:\nName and Value: The name and value of the cookie. Domain: The domain or sub-domains associated with the cookie. The cookie is sent to this sub/domain on subsequent requests. Path: The path on the website where the cookie is valid. The cookie is sent only for requests that match this path. Expiration Date: The date and time when the cookie expires. After this time, the cookie is no longer sent to the server. Secure: A flag that indicates the cookie should only be sent over secure connections (HTTPS). This ensures that the cookie is not sent over ( unencrypted\r) connections. HttpOnly: A flag that indicates the cookie should not be accessible by JavaScript (document.cookie). This helps to prevent cross-site scripting attacks (XSS) where malicious scripts can access sensitive cookies. SameSite: A flag that indicates how the cookie should be sent in cross-site requests. It helps prevent cross-site request forgery (CSRF) attacks by restricting when cookies are sent in cross-origin requests. Managing Cookies Most modern browsers allow you to manage cookies through their settings. You can view the cookies stored on your browser, delete specific cookies, block all cookies, or block cookies from specific websites.\nBy managing cookies, you can control your privacy and security while browsing the web. However, blocking all cookies may affect the functionality of some websites that rely on cookies for essential features.\nConclusion Cookies are an essential part of the web ecosystem, allowing websites to remember user-specific information and provide a personalized experience. They are used for session management, personalization, tracking, advertising, and more. By understanding how cookies work and their attributes, you can make informed decisions about your privacy and security while browsing the web.\n","permalink":"http://localhost:1313/blogs/what_are_browser_http_cookies/","summary":"An in-depth look at what browser HTTP cookies are, why they are used, how they work, and their attributes. Learn how cookies are used for session management, personalization, tracking, and advertising on the web.","title":"What Are Browser HTTP Cookies?"},{"content":" Access-Modifiers A way to control the visibility, accessibility, and scope of class\rmembers (\rvariable\r, method\r, etc.). They determine whether a member can be accessed from. Common access modifiers are public (accessible from anywhere), private (accessible only within the class), protected (accessible within the class and its subclasses), and default (accessible within the package\r). Access Token A string of alphanumeric characters (usually random) that is stand-In for the user\u0026rsquo;s credentials that allows a user to access their applications/services, or allows other third-party applications to access the user\u0026rsquo;s application/service data without exposing the user\u0026rsquo;s credentials. Access tokens are short-lived and can be revoked by the user at any time, and needs to be refreshed periodically using Refresh-Token\r. If token is compromised, the user\u0026rsquo;s credentials are not exposed, making damage minimal. Algorithm A set of well-defined instructions that are executed/performed in an order to perform a task or solve a problem (e.g., a recipe for baking a cake). They are the building blocks of Computer-Science which are used to perform calculations, data processing, and automated reasoning tasks. API Application Programming Interface is an interface\ri.e. a shared-boundary/layer between two software components\rthat provides a means for them to communicate or interact with each other for exchanging information. It defines how access or interaction should occur between the two. Argument A value/\rvariable\rthat is passed to a function\rwhen it is called\r. Functions can accept zero or more arguments, which are used as input to the function\u0026rsquo;s code block. Arguments are used to customize the behavior of a function. They are also called parameters. Authentication The process of verifying the identity of a user or system to ensure that they are who they claim to be. It is commonly used to grant access to resources or services based on the user\u0026rsquo;s identity. ‌ (Authenticate) To log in to a system/service by providing valid credentials (e.g., username and password, biometric data, etc.). Authorization The process of determining what a user or system is allowed to do or access. It involves granting or denying access/permissions based on the user\u0026rsquo;s identity, role, or other attributes. Backend The server-side\r/behind-scenes of an application that is responsible for storing and handling data, interacting with databases\r, performing user operations, computations, etc. It processes requests\rand sends back responses\rto the client\r/\rfrontend\r. Binary-Code Unlike humans who use and understand variety of symbols/values (0-9, A-Z, special characters), a computer is a base-2 system that uses and understands only bits\r. Computers use binary code (a series of bits) to represent all data, instructions, and information (whether it\u0026rsquo;s text, images, sound, etc. ). It is the most machine readable and least human readable form of data. Bit The smallest unit of data that represents a binary value, either 0 or 1. Basis for binary-code\rand all computer operations. A group of 8 bits is called a byte which is the standard unit of data storage in computers. Call The process of invoking/executing a function\r. When a function is called, the program jumps to the function\u0026rsquo;s code block, executes the code, and then returns to the point where the function was called along with the output (if any). Cascading A process in which an operation or set of operations is repeated multiple times, with the output of each operation becoming the input for the next operation. ‌ Applying a priority order when multiple rules target the same element. The \u0026ldquo;cascade\u0026rdquo; ensures that the most specific rule (or the last one defined) wins, allowing different styles to be combined smoothly. In CSS\r, inline \u0026gt; internal \u0026gt; external and id \u0026gt; class \u0026gt; element. Cipher An algorithm\rused for encryption\rand decryption\rof data. It takes plain-text data and converts it into a secret scrambled code (\rciphertext\r), or vice-versa. It optionally uses an encryption-key\r/\rdecryption-key\rto perform the operation. Examples include AES, DES, RSA, etc. CipherText The secret scrambled code produced by a cipher\r/\rencryption\r-\ralgorithm\rwhen plain-text data is encrypted\r. The cipher-text is unreadable without the correct decryption-key\r. Purpose is to keep information confidential and secure. Class A class is basically encapsulation\rof data (\rstate\r) and behavior (\rmethod\rs) into a single unit. However, it is abstract and is a blueprint/template. E.g., a class \u0026ldquo;Car\u0026rdquo; can have states like color, model, speed, etc., and behaviors like start(), stop(), accelerate(), etc. To have an actual car, you need to create an instance\rof the class, called an object\r. Also known as an object factory. A fundamental concept in OOP\r. Client A device or software that accesses services or resources provided by a server\rby making requests\r. Clients can be website/browsers, mobile applications, desktop applications, etc. Client-Side Things that happen on the client\r, e.g., rendering of the user-interface\r, handling user interactions and events, sending requests\rto the server\r, computing, etc. Cohesion The degree to which the elements (like variables\r, functions\r) inside an entity (like a class\ror module\r) are related to each other. High cohesion means that the elements inside the entity are closely related and work together to perform the same/single tasks. Low cohesion means that the elements inside the entity are not closely related and perform different/multiple tasks. Contiguous Continuous or adjacent, without any gaps/breaks/spaces in between. In the context of memory, it refers to a block of memory locations that are next to each other, forming a continuous range of addresses. Visualize\r\u0026times;\r. Compile Computers cannot understand or execute source-code\r. Compilation is the process of translating the complete source code into machine-code\rbefore the program is executed, opposed to interpreting\r. A compiler\ris required only once, and the compiled code can be executed multiple times. Compiled languages are \u0026lsquo;faster\u0026rsquo; because the whole code is already translated. Compiler A program that compiles\r. It also checks for errors in the code, and optimizes the code for better performance. The output of the compilation process is an executable file that can then be run by the computer. Compile-Time The period when a program is being compiled\r. It precedes the run-time\r. Some languages only have a run time, as they are interpreted\r. Coupling The degree of interdependence between two entities (like class\r, module\r, function\r, etc.). High coupling means that the entities are closely related and depend on each other, making them harder to change independently. Low coupling means that the entities are loosely related and can be changed independently without affecting each other. CSS Cascading\rStyle Sheets\ris used for describing and styling the presentation of a document written in HTML. CSS describes how elements should be rendered on screen, on paper, in speech, or on other media. E.g., changing the color, font, size, spacing, positioning, and layout of elements on a web page. Database A structured collection of related data that is stored and organized in a way that allows for efficient retrieval, updating, and management. Databases are used to store information for applications, websites, and other systems. data-hiding A concept in OOP\rthat puts encapsulation\rinto good use by restricting the direct access of a class\r\u0026rsquo;s state\rfrom anywhere outside the class. It enforces a forcefield around the state by allowing only the class\u0026rsquo;s method\rs to access and manipulate the state, and allowing access to state from outside the class only through these methods. It is achieved through access-modifiers\r. Forcefield helps in preventing misuse of the state, accidental changes, and ensuring data integrity. Provides high-coupling\rby reducing the dependency on the internal state of the class, thus allowing interdependent components to be changed independently. \u0026lsquo;hiding\u0026rsquo; is a misnomer, it is more about controlling access\nData-Structure A way of organizing and storing related data so that it can be accessed and modified efficiently. A way of structurally uniting/grouping data by defining the relationship between the data. For example arrays\r\u0026times;\r, LinkedLists\r\u0026times;\r, Trees\r\u0026times;\r, HashTables\r\u0026times;\retc. Data-Type It specifies the type of data that a variable\ris allowed to store (\rstatically-typed\rlanguages) or the type of data that a variable currently holds (\rdynamically-typed\rlanguages). It defines the operations that can be performed on the data. Examples include integers, strings, booleans, functions\r, objects\r, etc. Decode The process of converting encoded\rdata back to its original form. Decoding is the reverse of encoding and is used to retrieve the original data from its encoded form. Decryption The process of converting secret scrambled code (\rciphertext\r) back into plain-text data. A cipher\r/\ralgorithm\ris used to decrypt the data (optionally with a decryption-key\r) to reveal the original message. Decryption-Key A secret value (random string of characters) that is used to decrypt\rsecret scrambled code (\rciphertext\r) back into plain-text data. The key is used by a cipher\r/\ralgorithm\rto perform the decryption operation. Discord A platform where you can chat, speak, stream with your friends or communities. A Discord server is like a big group space. Servers contain channels which are like chat rooms for a specific topic. You can also join voice channels to talk/stream. Discord bots are user interactable community-made programs that can help you manage your server, play music, moderate, play games, etc that you can add to your server. DNS The Domain Name System translates/resolves website domain names into IP Addresses\r, which are used by browsers as the locations to request\rwebsites/\rwebpage-components\rfrom the web-servers\rbearing those IP Addresses that hosts the files. It acts as the internet\u0026rsquo;s phone book, eliminating the need for users to remember IP addresses. DOM Before JS\r, web pages had little/no interactivity, the content, style, layout of the webpage could not be altered after it was loaded and rendered on the client\r(browser). Document object Model is a tree-like\r\u0026times;\rdata-structure\rrepresenting the structure of a webpage through objects\rwhere each object represents a part of the page (e.g., elements, attributes, text, etc.). It allows JS to manipulate the content, layout, and style of the webpage on client-side\r. Thus, it is a programming interface\rfor webpages that enables interaction with the page\u0026rsquo;s content and structure, e.g. changing color theme, click/hover effects, animation effects, menu toggles, etc. Dynamically-Typed A programming language in which the data-type\ris associated with values and not with variables\r. The type of data is determined at runtime\r. The type of data a variable holds can change during the execution of the program. Less strict and more flexible than statically-typed\rlanguages. Examples include JavaScript, Python, Ruby, etc. Encapsulation In low-cohesion\rsystems, the data (\rvariables\r) and functions\rare scattered and not related. Encapsulation is the bundling/grouping of data and functions that operate on that data (i.e. those data and functions that are related) into a single unit, called a class\r. It is considered one of the four fundamental OOP\rconcepts. Encapsulation enables data-hiding\rand increases cohesion. Encode The process of converting data from one form to another, usually to ensure that it is compatible with a specific format/system, or to efficiently and properly transmit/store the data. Examples include URL encoding, base64 encoding, etc. Unlike encryption\r, encoding does not provide security or confidentiality. Encryption The process of converting plain-text data into a secret code (\rciphertext\r) to prevent unwanted people from reading it. A cipher\r/\ralgorithm\ris used to encrypt (optionally with an encryption-key\r) the data. The scrambled message can only be understood by someone who has the correct decryption key. Encryption-Key A secret value (random string of characters) that is used to encrypt\rplain-text data. The key is used by an encryption-\ralgorithm\r/\rcipher\rto convert the plain-text data into a secret scrambled code (\rciphertext\r). First-Class-Citizen In programming languages, it is a entity/\rdata-type\rthat can be treated like any other value or variable\r. It can be passed as an argument\rto a function\r, returned from a function, assigned to a variable as a value. In some languages, functions are first-class citizens, meaning they can be treated like any other value. This allows for more flexibility and power in the language. Framework A collection of tools and libraries\rthat help developers build applications more efficiently by providing pre-written code for common/boiler-plate tasks. Frameworks provide a structure for developing applications and enforce certain patterns and practices to ensure consistency and maintainability. Frontend The client-side\r/front-scenes of a application that is responsible for rendering of the user-interface\r, handling user interactions and events, sending requests\rto the server\r, computing. Function A block of code that performs a specific task or operation. They take arguments\r, perform computations/work, and optionally return output. Function themselves compiled\r/\rinterpreted\rinto a series of instructions (more nuanced when function includes metadata\ror is a more complex object\r). In some programming languages, functions are first-class-citizen\ri.e. they are nothing but a value which is a reference\rto the first instruction of the function (note possible nuances). High-Level Writing code that is easy to read and write for humans. It is abstracted from the details of the computer\u0026rsquo;s hardware and is closer to human language than machine-language\r. High-level languages are more expressive and less complex than low-level\rlanguages. However, they are less efficient and slower to execute than low-level languages and more work is required to convert them to machine code. HTML HyperText\rmarkup language is the standard Markup-Language\rfor creating web pages and web applications. It describes the structure and semantic meaning of web content using a system of tags and attributes. HTML elements are the building blocks of a website, e.g. headings (), paragraphs (), images (), links (), etc which can be nested inside each other. The browser reads the HTML file and renders the content on the screen. HTTP HyperText\rTransfer\rProtocol is the Protocol\rthat clients\r(browsers) and servers\r(\rWeb-Servers\r) use to communicate website components\rwith each other over the internet\r. HTTPS HyperText\rTransfer\rProtocol\rSecure is the secure version of HTTP\r. It encrypts\rthe data exchanged between the client\rand server\r, ensuring that it cannot be intercepted, read and understood by unauthorized parties. HyperText A text that contains links to other texts. When you click on a link, you are taken to another text. In the context of the web\r, it refers to web pages that contain links to other web pages. Idempotent An operation that produces the same result no matter how many times it is executed. For example, a GET request is idempotent because it retrieves the same resource every time it is executed. Instance An occurrence/implementation/realization (i.e. a concrete entity) of an abstract entity. In the context of object-oriented-programming\r, an instance is a specific object\r(concrete entity) created from a class\r(abstract entity). Each instance has its own unique data and can perform actions defined by the class. Instantiate The process of creating an instance\rof a class\rin object-oriented-programming\r. When a class is instantiated, a new object is created based on the class\u0026rsquo;s blueprint. Interface A shared boundary/layer between two entities (e.g., software components\r, devices, systems, etc.) that provides a means for them to communicate or interact with each other for exchanging information. It defines how access or interaction should occur between the entities. Internet It is like an intricate network of highways (data cables) connecting cities (\rservers\r) and towns (\rclients\r) across the globe. A network of network. It allows users to access and share information, resources, and services across the world and with each other. Interpret Computers cannot understand or execute source-code\r. Interpretation is the process of translating a line of source-code into machine-code\rAND then executing it BEFORE moving to the next line as opposed to compiling\r. The system will ALWAYS require an interpreter\rsoftware to execute the program. Interpreted languages are \u0026lsquo;slower\u0026rsquo; because translation has to be done during run-time\rand every time the program is executed. Interpreter A program that interprets\r. IP-Address An Internet-Protocol Address is a unique numerical label (e.g., 182.98.18.46) that identifies a device connected to the internet\r, or a local network that uses the Internet Protocol for communication. Being geo-locatable, it\u0026rsquo;s like a postal address for devices on the internet which helps in transmitting data efficiently between devices. JavaScript A high-level\r, interpreted programming language\rthat is used to make web pages interactive and dynamic. It is used to create responsive, interactive elements on web pages, such as pop-ups, animations, form validation, and more. JavaScript is executed on the client-side\r(browser) and can interact with the DOM\rof a web page to update content, style, and structure. JSON JavaScript Object Notation is a lightweight data-interchange format that is easy for humans to read and write, and easy for machines to parse\rand generate. It is used to transmit data between software components\ras an alternative to XML\r. While it is derived from JavaScript\r, it is language-independent. Library A collection of pre-written code that provides specific functionality to be used by other code. Libraries are reusable and can save time and effort by allowing developers to use existing code rather than writing it from scratch. All the public methods and signatures forms the API of the library. Low-Level Writing code that is closer to the computer\u0026rsquo;s hardware, it is like directly speaking to the computer in its own language making it more efficient and fast but less human readable. Involves giving very specific instructions about how the computer\u0026rsquo;s memory and processor should work. It can be more complex and harder to write than high-level\rlanguages. Lesser work required to translate the code into machine-code\r. Machine-Code Most fundamental language a computer can understand and execute directly without needing some \u0026rsquo;translation\u0026rsquo;. Operates at hardware level i.e. consists of instructions (made up of binary code\r) that corresponds to a specific operation the CPU can perform; thereby being specific to a computer\u0026rsquo;s architecture. Also called machine-language/machine-code. It is the lowest-level\rprogramming language. MAC-Address A Media Access Control Address is a hardware identifier that uniquely identifies each device on a network. Primarily, the manufacturer assigns it. They are often found on a device\u0026rsquo;s network interface controller (NIC) card. Markup-Language Systems for annotating a document in a way that is syntactically distinguishable from the text. The annotations typically define how the document should be structured, formatted, or displayed. They are static and do not have any logic or programming capabilities. Memory-Address Computers have memory which stores data. When you want to access some data, the computer needs to know where exactly it is stored in memory. Thus every byte\rof memory has an associated unique address which locates the data. When the data in the memory is the address of another memory location, it is called a pointer\r. Memory is usually contiguous\r. MetaData ㅤData about data. It provides information about other data. A good example would be a .jpg file of an image you take with your camera. If you open that image in, say, Photoshop, you can view the data itself as being the visible image of the photo you took, and you could also view and even edit the metadata which includes information like name of the photographer, date and time the photo was taken, camera model, etc. Every file has metadata associated with it. Module Represents a distinct unit of code that serves a unique and specific purpose, it\u0026rsquo;s self-contained\rand can be reused again and again. When people talk about things like packages\r, or libraries\r, they are also talking about \u0026ldquo;modules\u0026rdquo;. It is used to mean \u0026ldquo;some self contained bit of code that does this one specific thing\u0026rdquo;. Namespace Consider two people with the same name in a room, it would be confusing to call out their name. To avoid this, you could say \u0026ldquo;John from the marketing department\u0026rdquo; and \u0026ldquo;John from the sales department\u0026rdquo;. This is what namespaces do in programming. They allow you to use the same name for different things without causing confusion and naming conflicts. For example, two libraries\rmight have a function\rwith the same name, but they can be distinguished by their namespace (e.g., com.example.library1.function() and com.example.library2.function()) so that you can use both in the same program. The reverse order of the organization domain name is a common way to create namespaces. Object An object is a real-world entity that has state\rand behavior\r. While class\ris an abstract entity, an object is its concrete entity, it is an instance\rof a class. For example, a class \u0026ldquo;Car\u0026rdquo; can have states like color, model, speed, etc., and behaviors like start(), stop(), accelerate(), etc. To have an actual car, you need to create an object of the class. Objects are the building blocks of OOP\r. OOP Object-Oriented-Programming is a programming paradigm that is based on the concept of \u0026ldquo;\robjects\r\u0026rdquo;. Real-World entities of a system are modeled as classes\rwhose instances\rcommunicate with each other to perform tasks. It allows for the organization of code in a way that is more modular, reusable, and easier to maintain. OOP include the concepts encapsulation\r, inheritance\r, polymorphism\r, and abstraction\rand principles like SOLID\r. Package A package is used to provide a higher level, logical organization unit by grouping related modules\r/\rclasses\r/\rinterfaces\rtogether that provide a set of functionalities/tools. They provide namespace\rand are nestable. Often used to distribute and manage code, reuse code, and manage dependencies. Parse The process of analyzing a string of symbols to determine its grammatical structure with respect to a given formal grammar. It is used in programming to convert data from one format to another, such as from a string to a data structure\r. For example, parsing JSON\rstring data into a JavaScript\robject\r, or parsing an HTML\rdocument into a DOM\rtree, etc. Pointer A variable\rwhose value is a reference\r. One use is that it is lightweight because it does store the actual whole data, but only points to location of data. Port A specific point of communication that allows a computer to send and receive data over a network. Ports are identified by numbers, and each port is associated with a specific protocol or service. For example, port 80 is commonly used for HTTP traffic, and port 5432 is used for PostgreSQL database connections. ‌ Can be described as an internal address within a host computer that identifies a program or process Protocol A set of rules and guidelines that dictate how participants (whether they are devices, software components, or users) in a system should behave. Rate-Limit A restriction on the number of requests a client (user or application) can make to a server within a specified time frame. Rate limiting is used to prevent abuse, protect against denial-of-service attacks, and ensure fair usage of resources. Reference A reference is a type of data value that is a memory-address\rof another value/data i.e. it indicates where some other data is stored. As it points to some other data, it is used to access that data. A variable that stores a reference is called a pointer\r. Refresh-Token An Access-Token\ris short lived, meaning on expiry user will have to re-authenticate\r. Refresh-Token is string of alphanumeric characters (usually random) that can be used to be issued with a new Access Token after the current Access Token expires. It is used to maintain the user\u0026rsquo;s session without requiring the user to re-authenticate while ensuring the Access Token is short-lived and thereby more secure. Response When a server\rreceives a request\rfrom a client\r, it figures out what the client wants, processes the request and answers back to the client. This answer is called a response. The response typically contains the requested data or information, along with a status code indicating the success or failure of the request. Request Often, it is the backend\rthat stores and handles data, performs operations, etc. The client\r/\rfrontend\rwhen it needs data or wants to perform an operation, it must ask the backend server\rto do so. This asking is called a request, often over the network. The server processes the request and sends back a response\r. Self-Contained Something that is independent and complete on its own, without needing external components/resources to function. Though it may still interact with or expose parts of itself to other components. Server A computer program or a device that provides functionality to other devices or programs, known as clients\r, by responding to their requests. These devices are typically dedicated to serving the needs of other programs or users, therefore being powerful machines which lack output devices like a monitor. Server-Process A program that runs on a computer an a specific port\rand listens for incoming requests from clients\rover a network. It processes these requests and sends back responses to the clients. E.g., a web server, database server, etc. These processes usually run on a server\rmachine. Server-Side Things that happen on the server\r, e.g., processing of requests, interacting with databases, etc. Socket Port + IP Address. Also known as a communication endpoint. ‌ A socket is one endpoint of a two-way communication link between two programs running on the network. Software-Component A server-process\r(e.g. a web server, database server, etc.), a client application (e.g. a website/browser, mobile app, desktop app, etc.), or a library/module that provides specific functionality to a software system. Source-Code The raw textual human-readable code of a computer program written by a programmer in a programming language. Computers do not understand this version of code, thus it needs to be translated into machine-code\rbefore it can be executed. Translation is achieved through the process of compilation\ror interpretation\r. State The characteristics of an object\rwhich represents what an object is or what it looks like. It is the data (stored in variables\r) that an object holds at a given point in time. Also called attributes/properties. It defines the object\u0026rsquo;s behavior\r. With a dog as an example object, its state would include its name, breed, age, color, etc. Statically-Typed A programming language where the data type\rof a variable\ris known at compile time\r. The data type of a variable is explicitly declared when the variable is created, and it cannot change during the program\u0026rsquo;s execution. Statically-typed languages are more strict and less flexible than dynamically-typed\rlanguages. Examples include C, Java, C++, etc. Style-Sheet-Language A language used to describe the presentation or formatting of a document written in a markup language\rlike HTML\r, typically defining how elements should be displayed or rendered across different media. Transfer Exchange of data between the client and server. UI User Interface, the visual elements of a software application that users interact with, such as buttons, menus, forms, and other controls. It is designed to be intuitive, user-friendly, and responsive to user input. User-Interface The visual elements of a software application that users interact with, such as buttons, menus, forms, and other controls. It is designed to be intuitive, user-friendly, and responsive to user input. UX User Experience, the overall experience of a person using a product such as a website or computer application, especially in terms of how easy or pleasing it is to use. URL A Uniform Resource Locator is a web address that specifies the location of a resource on the internet. It consists of a protocol (e.g., HTTP, HTTPS), a domain name (e.g., example.com), a path to the resource (e.g., /blog) and optional query parameters (e.g., ?id=123) to makeup a complete URL, e.g., https://example.com/blog?id=123. Variable When writing a program, often you will want to store data in memory for later use. Instead of explicitly using the memory-address\rto refer/access the data, you can give a descriptive name of your choice so that it gets associated with the data (alias) and allows you to access/refer to it through the name. This name is called a variable. The data it holds can be varied/changed. So, basically it is a container for storing data values by being an alias to the memory location. Values can be of different types (e.g., numbers, strings, objects, etc.) and sizes. WebPage-Components HTML, CSS files, JavaScript files, images, videos, etc. that make up a webpage. Related webpages make up a website, sharing a common domain name. Web-Server A server that hosts website component files (such as HTML, CSS, JavaScript files, images, etc.) and an HTTP server that processes incoming requests from clients (web browsers) and responds with the requested resources. Web servers are accessed through the domain names of the websites they host. XML Extensible Markup Language is a markup language that is commonly used to carry and describe data. It is a self-descriptive language that allows you to define your own tags and attributes. ","permalink":"http://localhost:1313/glossary/","summary":"\u003cdl\u003e\n\u003cdt\u003eAccess-Modifiers\u003c/dt\u003e\n\u003cdd\u003eA way to control the \u003cstrong\u003evisibility, accessibility, and scope\u003c/strong\u003e of \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"531014941121281371615\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"class\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    class\r\n\u003c/span\u003e\r\n members (\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"136131514127295111048\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"variable\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    variable\r\n\u003c/span\u003e\r\n, \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"612743151111359210814\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"method\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    method\r\n\u003c/span\u003e\r\n, etc.). They determine whether a member can be accessed from. Common access modifiers are public (accessible from anywhere), private (accessible only within the class), protected (accessible within the class and its subclasses), and default (accessible within the \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"715431152121396101418\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"package\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    package\r\n\u003c/span\u003e\r\n).\u003c/dd\u003e\n\u003cdt\u003eAccess Token\u003c/dt\u003e\n\u003cdd\u003eA string of alphanumeric characters (usually random) that is \u003cstrong\u003estand-In for the user\u0026rsquo;s credentials\u003c/strong\u003e that allows a user to access their applications/services, or allows other third-party applications to access the user\u0026rsquo;s application/service data without exposing the user\u0026rsquo;s credentials. Access tokens are short-lived and can be revoked by the user at any time, and needs to be refreshed periodically using \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"781410151613124113592\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"refresh-token\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    Refresh-Token\r\n\u003c/span\u003e\r\n. If token is compromised, the user\u0026rsquo;s credentials are not exposed, making damage minimal.\u003c/dd\u003e\n\u003cdt\u003eAlgorithm\u003c/dt\u003e\n\u003cdd\u003eA \u003cstrong\u003eset of well-defined instructions\u003c/strong\u003e that are executed/performed in an order to perform a task or solve a problem (e.g., a recipe for baking a cake). They are the building blocks of Computer-Science which are used to perform calculations, data processing, and automated reasoning tasks.\u003c/dd\u003e\n\u003cdt\u003eAPI\u003c/dt\u003e\n\u003cdd\u003eApplication Programming Interface is an \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"278155941311121410631\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"interface\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    interface\r\n\u003c/span\u003e\r\n i.e. a shared-boundary/layer between two \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"151347911318122145106\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"software-component\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    software components\r\n\u003c/span\u003e\r\n that provides a means for them to communicate or interact with each other for exchanging information. It \u003cstrong\u003edefines how access or interaction should occur\u003c/strong\u003e between the two.\u003c/dd\u003e\n\u003cdt\u003eArgument\u003c/dt\u003e\n\u003cdd\u003eA value/\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"421511671431011398125\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"variable\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    variable\r\n\u003c/span\u003e\r\n that is passed to a \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"542713151410613119812\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"function\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    function\r\n\u003c/span\u003e\r\n when it is \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"131514451811327912610\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"call\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    called\r\n\u003c/span\u003e\r\n. Functions can accept zero or more arguments, which are used as input to the function\u0026rsquo;s code block. Arguments are used to customize the behavior of a function. They are also called parameters.\u003c/dd\u003e\n\u003cdt\u003eAuthentication\u003c/dt\u003e\n\u003cdd\u003eThe process of \u003cstrong\u003everifying the identity\u003c/strong\u003e of a user or system to ensure that they are who they claim to be. It is commonly used to grant access to resources or services based on the user\u0026rsquo;s identity.\u003c/dd\u003e\n\u003cdt\u003e‌\u003c/dt\u003e\n\u003cdd\u003e(Authenticate) To log in to a system/service by providing valid credentials (e.g., username and password, biometric data, etc.).\u003c/dd\u003e\n\u003cdt\u003eAuthorization\u003c/dt\u003e\n\u003cdd\u003eThe process of \u003cstrong\u003edetermining what a user or system is allowed to do\u003c/strong\u003e or access. It involves granting or denying access/permissions based on the user\u0026rsquo;s identity, role, or other attributes.\u003c/dd\u003e\n\u003cdt\u003eBackend\u003c/dt\u003e\n\u003cdd\u003eThe \u003cstrong\u003e\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"315911781135241461210\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"server-side\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    server-side\r\n\u003c/span\u003e\r\n\u003c/strong\u003e/\u003cstrong\u003ebehind-scenes\u003c/strong\u003e of an application that is responsible for storing and handling data, interacting with \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"517103151484111262913\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"database\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    databases\r\n\u003c/span\u003e\r\n, performing user operations, computations, etc. It processes \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"110714151369451238112\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"request\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    requests\r\n\u003c/span\u003e\r\n and sends back \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"141013315957164121128\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"response\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    responses\r\n\u003c/span\u003e\r\n to the \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"510193148412611713152\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"client\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    client\r\n\u003c/span\u003e\r\n/\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"813111697215451031214\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"frontend\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    frontend\r\n\u003c/span\u003e\r\n.\u003c/dd\u003e\n\u003cdt\u003eBinary-Code\u003c/dt\u003e\n\u003cdd\u003eUnlike humans who use and understand variety of symbols/values (0-9, A-Z, special characters), a computer is a \u003cstrong\u003ebase-2 system\u003c/strong\u003e that uses and understands only \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"151084261117351214139\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"bit\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    bits\r\n\u003c/span\u003e\r\n. Computers use binary code (\u003cstrong\u003ea series of bits\u003c/strong\u003e) to represent all data, instructions, and information (whether it\u0026rsquo;s text, images, sound, etc. ). It is the most machine readable and least human readable form of data.\u003c/dd\u003e\n\u003cdt\u003eBit\u003c/dt\u003e\n\u003cdd\u003eThe smallest unit of data that represents a binary value, either 0 or 1. Basis for \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"951331518147124211106\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"binary-code\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    binary-code\r\n\u003c/span\u003e\r\n and all computer operations. A group of 8 bits is called a byte which is the \u003cstrong\u003estandard unit\u003c/strong\u003e of data storage in computers.\u003c/dd\u003e\n\u003cdt\u003eCall\u003c/dt\u003e\n\u003cdd\u003eThe process of \u003cstrong\u003einvoking/executing a \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"211512863101371159144\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"function\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    function\r\n\u003c/span\u003e\r\n\u003c/strong\u003e. When a function is called, the program jumps to the function\u0026rsquo;s code block, executes the code, and then returns to the point where the function was called along with the output (if any).\u003c/dd\u003e\n\u003cdt\u003eCascading\u003c/dt\u003e\n\u003cdd\u003eA process in which an operation or set of operations is repeated multiple times, with the \u003cstrong\u003eoutput of each operation becoming the input\u003c/strong\u003e for the next operation.\u003c/dd\u003e\n\u003cdt\u003e‌\u003c/dt\u003e\n\u003cdd\u003eApplying a \u003cstrong\u003epriority order\u003c/strong\u003e when multiple rules target the same element. The \u0026ldquo;cascade\u0026rdquo; ensures that the most specific rule (or the last one defined) wins, allowing different styles to be combined smoothly. In \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"141343926101211515187\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"css\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    CSS\r\n\u003c/span\u003e\r\n, inline \u0026gt; internal \u0026gt; external and id \u0026gt; class \u0026gt; element.\u003c/dd\u003e\n\u003cdt\u003eCipher\u003c/dt\u003e\n\u003cdd\u003eAn \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"111131283151027659414\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"algorithm\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    algorithm\r\n\u003c/span\u003e\r\n \u003cstrong\u003eused for \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"541462151331087111219\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"encryption\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    encryption\r\n\u003c/span\u003e\r\n and \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"146895111037122141513\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"decryption\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    decryption\r\n\u003c/span\u003e\r\n\u003c/strong\u003e of data. It takes plain-text data and converts it into a secret scrambled code (\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"671312311910141154285\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"ciphertext\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    ciphertext\r\n\u003c/span\u003e\r\n), or vice-versa. It optionally uses an \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"521071581214361311194\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"encryption-key\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    encryption-key\r\n\u003c/span\u003e\r\n/\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"169141210313711415258\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"decryption-key\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    decryption-key\r\n\u003c/span\u003e\r\n to perform the operation. Examples include AES, DES, RSA, etc.\u003c/dd\u003e\n\u003cdt\u003eCipherText\u003c/dt\u003e\n\u003cdd\u003eThe \u003cstrong\u003esecret scrambled code\u003c/strong\u003e produced by a \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"195712103132141568114\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"cipher\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    cipher\r\n\u003c/span\u003e\r\n/\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"671129141513510342118\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"encryption\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    encryption\r\n\u003c/span\u003e\r\n-\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"892133765111015124114\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"algorithm\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    algorithm\r\n\u003c/span\u003e\r\n when plain-text data is \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"912648101314135711152\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"encrypted\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    encrypted\r\n\u003c/span\u003e\r\n. The cipher-text is unreadable without the correct \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"695111510732841312114\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"decryption-key\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    decryption-key\r\n\u003c/span\u003e\r\n. Purpose is to keep information confidential and secure.\u003c/dd\u003e\n\u003cdt\u003eClass\u003c/dt\u003e\n\u003cdd\u003eA class is basically \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"639121115141410713582\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"encapsulation\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    encapsulation\r\n\u003c/span\u003e\r\n of data (\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"104152145139617811312\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"state\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    state\r\n\u003c/span\u003e\r\n) and behavior (\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"912151411512641338710\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"method\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    method\r\n\u003c/span\u003e\r\ns) into a single unit. However, it is abstract and is a blueprint/template. E.g., a class \u0026ldquo;Car\u0026rdquo; can have states like color, model, speed, etc., and behaviors like start(), stop(), accelerate(), etc. To have an actual car, you need to create an \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"121495811615133210147\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"instance\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    instance\r\n\u003c/span\u003e\r\n of the class, called an \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"511124138763101412159\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"object\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    object\r\n\u003c/span\u003e\r\n. Also known as an object factory. A fundamental concept in \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"147132691113151281054\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"oop\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    OOP\r\n\u003c/span\u003e\r\n.\u003c/dd\u003e\n\u003cdt\u003eClient\u003c/dt\u003e\n\u003cdd\u003eA \u003cstrong\u003edevice\u003c/strong\u003e or \u003cstrong\u003esoftware\u003c/strong\u003e that accesses services or resources provided by a \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"118109213153471416512\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"server\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    server\r\n\u003c/span\u003e\r\n by making \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"271312103614945118151\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"request\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    requests\r\n\u003c/span\u003e\r\n. Clients can be website/browsers, mobile applications, desktop applications, etc.\u003c/dd\u003e\n\u003cdt\u003eClient-Side\u003c/dt\u003e\n\u003cdd\u003e\u003cstrong\u003eThings that happen on the \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"110133212811975415146\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"client\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    client\r\n\u003c/span\u003e\r\n\u003c/strong\u003e, e.g., rendering of the \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"810325941171415113126\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"user-interface\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    user-interface\r\n\u003c/span\u003e\r\n, handling user interactions and events, sending \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"151271094113131268514\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"request\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    requests\r\n\u003c/span\u003e\r\n to the \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"131112314915105642781\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"server\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    server\r\n\u003c/span\u003e\r\n, computing, etc.\u003c/dd\u003e\n\u003cdt\u003eCohesion\u003c/dt\u003e\n\u003cdd\u003eThe degree to which the elements (like \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"111310691215214735841\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"variable\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    variables\r\n\u003c/span\u003e\r\n, \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"131214310895172151164\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"function\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    functions\r\n\u003c/span\u003e\r\n) inside an entity (like a \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"213315109112114857614\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"class\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    class\r\n\u003c/span\u003e\r\n or \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"145731011161224813915\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"module\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    module\r\n\u003c/span\u003e\r\n) are related to each other. High cohesion means that the elements inside the entity are closely related and work together to perform the same/single tasks. Low cohesion means that the elements inside the entity are not closely related and perform different/multiple tasks.\u003c/dd\u003e\n\u003cdt\u003eContiguous\u003c/dt\u003e\n\u003cdd\u003e\u003cstrong\u003eContinuous\u003c/strong\u003e or \u003cstrong\u003eadjacent\u003c/strong\u003e, without any gaps/breaks/spaces in between. In the context of memory, it refers to a block of memory locations that are next to each other, forming a continuous range of addresses. \r\n    \u003ca href=\"#\" class=\"diag-link\" data-toggle=\"modal-memory-address\"\u003eVisualize\u003c/a\u003e\r\n\r\n    \r\n    \u003cdiv id=\"modal-memory-address\" class=\"diag-modal hidden\"\u003e\r\n        \u003cdiv class=\"diag-diag-modal-content\"\u003e\r\n            \u003cspan class=\"close-btn\"\u003e\u0026times;\u003c/span\u003e\r\n            \u003cimg src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210322122448/1DDynamicArray.png\" alt=\"memory-address diagram\"\u003e\r\n        \u003c/div\u003e\r\n    \u003c/div\u003e\r\n\u003cstyle\u003e\r\n    .diag-link {\r\n        color: #18d093;\r\n        cursor: help;\r\n    }\r\n\r\n    .diag-modal {\r\n        position: fixed;\r\n        z-index: 1000;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: rgba(0, 0, 0, 0.7);\r\n        display: none;\r\n    }\r\n\r\n    .diag-diag-modal-content {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: white;\r\n        padding: 20px;\r\n        border-radius: 8px;\r\n        max-width: 90%;\r\n        max-height: 90%;\r\n        overflow: auto;\r\n    }\r\n\r\n    .close-btn {\r\n        position: absolute;\r\n        top: 10px;\r\n        right: 20px;\r\n        font-size: 24px;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n\u003c/style\u003e\r\n\r\n\u003cscript\u003e\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const links = document.querySelectorAll('.diag-link');\r\n    links.forEach(link =\u003e {\r\n        link.addEventListener('click', function(event) {\r\n            event.preventDefault();\r\n            const modalId = link.getAttribute('data-toggle');\r\n            const modal = document.getElementById(modalId);\r\n            modal.style.display = 'block';\r\n        });\r\n    });\r\n\r\n    const modals = document.querySelectorAll('.diag-modal');\r\n    modals.forEach(modal =\u003e {\r\n        const closeBtn = modal.querySelector('.close-btn');\r\n        closeBtn.addEventListener('click', function() {\r\n            modal.style.display = 'none';\r\n        });\r\n\r\n        modal.addEventListener('click', function(event) {\r\n            if (event.target === modal) {\r\n                modal.style.display = 'none';\r\n            }\r\n        });\r\n    });\r\n});\r\n\u003c/script\u003e\r\n.\u003c/dd\u003e\n\u003cdt\u003eCompile\u003c/dt\u003e\n\u003cdd\u003eComputers cannot understand or execute \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"611011521343141587912\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"source-code\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    source-code\r\n\u003c/span\u003e\r\n. Compilation is the process of \u003cstrong\u003etranslating the complete source code into \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"107851531111369214412\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"machine-code\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    machine-code\r\n\u003c/span\u003e\r\n\u003c/strong\u003e before the program is executed, opposed to \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"471081215611391213145\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"interpret\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    interpreting\r\n\u003c/span\u003e\r\n. A \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"115101314615724912813\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"compile\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    compiler\r\n\u003c/span\u003e\r\n is required only once, and the compiled code can be executed multiple times. Compiled languages are \u0026lsquo;faster\u0026rsquo; because the whole code is already translated.\u003c/dd\u003e\n\u003cdt\u003eCompiler\u003c/dt\u003e\n\u003cdd\u003eA \u003cstrong\u003eprogram\u003c/strong\u003e that \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"138101527121459311614\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"compile\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    compiles\r\n\u003c/span\u003e\r\n. It also checks for errors in the code, and optimizes the code for better performance. The output of the compilation process is an executable file that can then be run by the computer.\u003c/dd\u003e\n\u003cdt\u003eCompile-Time\u003c/dt\u003e\n\u003cdd\u003eThe period when a program is being \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"911210753141215113864\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"compile\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    compiled\r\n\u003c/span\u003e\r\n. It precedes the \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"101314913212758114615\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"run-time\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    run-time\r\n\u003c/span\u003e\r\n. Some languages only have a run time, as they are \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"139456721214151183110\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"interpret\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    interpreted\r\n\u003c/span\u003e\r\n.\u003c/dd\u003e\n\u003cdt\u003eCoupling\u003c/dt\u003e\n\u003cdd\u003eThe degree of \u003cstrong\u003einterdependence\u003c/strong\u003e between two entities (like \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"121181914321013645157\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"class\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    class\r\n\u003c/span\u003e\r\n, \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"710191214281365114315\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"module\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    module\r\n\u003c/span\u003e\r\n, \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"131567109132414581112\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"function\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    function\r\n\u003c/span\u003e\r\n, etc.). High coupling means that the entities are closely related and depend on each other, making them harder to change independently. Low coupling means that the entities are loosely related and can be changed independently without affecting each other.\u003c/dd\u003e\n\u003cdt\u003eCSS\u003c/dt\u003e\n\u003cdd\u003e\u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"341213528141510611179\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"cascading\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    Cascading\r\n\u003c/span\u003e\r\n \u003cspan class=\"glossary-term\"\r\n       glossary-data-tree-id=\"144151251310621381197\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"style-sheet-language\"\r\n       onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n     Style Sheets\r\n \u003c/span\u003e\r\n is used for \u003cstrong\u003edescribing and styling the presentation\u003c/strong\u003e of a document written in HTML. CSS describes how elements should be rendered on screen, on paper, in speech, or on other media. E.g., changing the color, font, size, spacing, positioning, and layout of elements on a web page.\u003c/dd\u003e\n\u003cdt\u003eDatabase\u003c/dt\u003e\n\u003cdd\u003eA \u003cstrong\u003estructured collection of related data\u003c/strong\u003e that is stored and organized in a way that allows for efficient retrieval, updating, and management. Databases are used to store information for applications, websites, and other systems.\u003c/dd\u003e\n\u003cdt\u003edata-hiding\u003c/dt\u003e\n\u003cdd\u003e\n\u003cp\u003eA concept in \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"147512113810415613192\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"oop\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    OOP\r\n\u003c/span\u003e\r\n that puts \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"131413415128106571129\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"encapsulation\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    encapsulation\r\n\u003c/span\u003e\r\n into good use by restricting the direct access of a \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"117814155161341239102\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"class\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    class\r\n\u003c/span\u003e\r\n\u0026rsquo;s \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"111012144151781329536\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"state\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    state\r\n\u003c/span\u003e\r\n from anywhere outside the class. It enforces a forcefield around the state by allowing only the class\u0026rsquo;s \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"581131211510414136927\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"method\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    method\r\n\u003c/span\u003e\r\ns to access and manipulate the state, and allowing access to state from outside the class only through these methods. It is achieved through \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"984271510114612351311\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"access-modifier\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    access-modifiers\r\n\u003c/span\u003e\r\n. Forcefield helps in preventing misuse of the state, accidental changes, and ensuring data integrity. Provides \u003cspan class=\"glossary-term\"\r\n      glossary-data-tree-id=\"913846271123105141115\"glossary-data-tree-node-id=\"0\"glossary-data-term=\"coupling\"\r\n      onclick=\"fetchAndRenderGlossaryDefinition(this)\"\u003e\r\n    high-coupling\r\n\u003c/span\u003e\r\n by reducing the dependency on the internal state of the class, thus allowing interdependent components to be changed independently. \r\n\u003chr class=\"hr\" /\u003e \u0026lsquo;hiding\u0026rsquo; is a misnomer, it is more about controlling access\u003c/p\u003e","title":"Glossary"},{"content":"Why OAuth? Before we dive into OAuth, let\u0026rsquo;s understand why it is essential in the context of security. Every tool that humans create is done for fixing a problem, and OAuth is no different.\nLet us consider a scenario where you have stored your media files (images, videos, etc.) on a cloud storage service like Google Drive. Now, you are using a media editing application and want to edit an image/video that is stored on your Google Drive. You don\u0026rsquo;t want to download the file to your local system, edit it with the editing application, and then upload it back to Google Drive, because you find it inconvenient. Instead, you want the media editing application to directly access the file on Google Drive and make the necessary changes.\nSo, how can the media editing application access your files on Google Drive? The files are private and can only be accessed by you. One way is to provide your Google Drive credentials (username and password) to the media editing application. But this is a security risk because the application can misuse your credentials or store them insecurely. This is where OAuth comes into play. It provides a secure way for you to grant access to your Google Drive files to the media editing application without sharing your credentials.\nIn this way, OAuth enables communication between different services while maintaining the security and privacy of user data.\n2.0? Are there different versions of OAuth? In this guide, we will focus on OAuth 2.0, which is the latest version of the OAuth protocol. Other versions are OAuth 1.0 and OAuth 1.0a, which are now considered outdated due to security vulnerabilities and limitations.\nDefinition OAuth (Open Authorization) is a protocol\rthat allows a user to grant limited access to their resources on one site to another site without sharing their credentials.\nUse Cases of OAuth 2.0 OAuth 2.0 is widely used in various scenarios to grant access to user data securely. Some common use cases of OAuth 2.0 include:\nSocial Login: Users can log in to applications using their social media accounts like Google, Facebook, or Twitter (remember the \u0026ldquo;Log in with Google\u0026rdquo; or \u0026ldquo;Log in with Facebook\u0026rdquo; buttons?). As authentication is provided by the social media accounts, this eliminates the need to create a new account and remember another set of credentials. It also lifts the burden of password management and security from the application owner. - It enables Single Sign-On (SSO): Users can log in to multiple applications using a single set of credentials. API Authorization: Third-Party applications including plugins/extensions can access user data through APIs like Discord, Google Drive, Twitter, GitHub, etc. Components of OAuth 2.0 Resource Owner: The user who owns the data and grants access to it. In the Google Drive example, you are the resource owner. Client: The third-party application or website that wants to access the user\u0026rsquo;s data. In the Google Drive example, the media editing application is the client. Authorization Server: The server that authenticates the user and issues Access Tokens. In the Google Drive example, Google Drive\u0026rsquo;s authorization server. Resource Server: The server that hosts the user\u0026rsquo;s data and verifies Access Tokens. In the Google Drive example, Google Drive itself. How OAuth 2.0 Works If the users don\u0026rsquo;t share their credentials, how does OAuth 2.0 work? Through the term we mentioned earlier: \u0026ldquo;Access Tokens.\u0026rdquo; Access Tokens are like keys that allow the client to access the user\u0026rsquo;s data without knowing the user\u0026rsquo;s credentials. These tokens are short-lived and can be revoked by the user at any time. As they are short lived, we often use another key called the \u0026ldquo;Refresh Token\u0026rdquo; to get a new Access Token when the current one expires.\nOAuth 2.0 works by following a series of steps to grant access to the user\u0026rsquo;s data:\nAuthorization Request: The client sends an authorization request to the authorization server, asking for permission to access the user\u0026rsquo;s data. The set of permissions requested is known as a \u0026ldquo;scope\u0026rdquo; (e.g., read-only access, read-write access, delete access). Example: \u0026ldquo;Can I access this user\u0026rsquo;s Google Drive files?\u0026rdquo; User Authentication: The user authenticates with the authorization server and grants permission to the client. (You should always check the scope of permissions requested before granting access). Example: You log in to your Google account and authorize the media editing application to access your Google Drive files. Access Token Request: The client sends a request to the authorization server for an Access Token. Example: The media editing application requests an Access Token to access your Google Drive files. Access Token Grant: The authorization server issues an Access Token to the client. Example: Google Drive issues an Access Token to the media editing application. Access Resource: The client sends the Access Token to the resource server to access the user\u0026rsquo;s data. Example: The media editing application uses the Access Token to access your Google Drive files. Resource Access: The resource server verifies the Access Token and grants access to the user\u0026rsquo;s data. Example: Google Drive verifies the Access Token and allows the media editing application to access your files. Conclusion OAuth 2.0 is a powerful and secure protocol that allows users to grant access to their data without sharing their credentials. It is widely used in various applications and scenarios to provide a secure and flexible way to access user data. Understanding OAuth 2.0 is essential for developers who want to build secure and user-friendly applications that interact with third-party services.\n","permalink":"http://localhost:1313/blogs/what_is_oauth_2.0_definition_use_cases_and_how_it_works/","summary":"A comprehensive guide to understanding OAuth (2.0), its definition, use cases, and how it works to grant secure access to user data.","title":"What Is OAuth (2.0)? | Definition, Use Cases, and How it Works"},{"content":"Background: I was tasked with extending an e-sports FIFA tournament service (SAFA) that had been operating primarily on Discord through a Discord bot, to the web. The aim was to develop a web interface by integrating it with Discord, which provides OAuth authentication. Since the database for users was modeled around their Discord account ID, I implemented login functionality using Discord OAuth and JWT tokens.\nAuthorization Workflow: Initially, the user is logged out. Upon login, an access token and refresh token are created, both stored as JWTs in cookies. The access token is sent with all requests (via the bearer authorization header), while the refresh token is only sent to a specific refresh endpoint (/refresh). The backend verifies these tokens (JWT verification) whenever frontend makes a request to it.\nIf verification fails for reasons other than expiration, the user is logged out. If the token has expired, the frontend silently attempts to refresh it by sending a request to backend at /refresh. If the refresh is successful, new access and refresh tokens are issued, and the original request is retried. If any error occurs during this process, including token expiry, the user is logged out.\nThe Problem: This process works well when only one request is sent at a time. However, since the website uses client-side rendering (CSR) and is a single-page application (SPA) built with React, users often send multiple AJAX requests simultaneously. This can lead to unintended session termination due to concurrent refresh attempts which logs the user out.\nWhy does this happen? When the access token has expired, the first request to the backend triggers a refresh and retrieves new tokens. However, before these new tokens are updated to the frontend, other requests are sent with the old tokens. If those requests also try to refresh the tokens, Discord returns an error (403) because the refresh token has already been used. This causes the system to terminate the user\u0026rsquo;s session thereby logging them out.\nSolution Options: Extend token expiration periods: This reduces the frequency of refreshes and unintended session terminations, but it introduces security risks and is not a proper solution. Queue requests: When the frontend detects an expired token, it queues the requests until the refresh is completed. This can slow down the app, especially when expiration times are short. Locking mechanism of Refresh Token: The backend uses locks on Refresh Tokens, ensuring that only one refresh attempt for a Refresh Token is processed at a time. The Chosen Solution: Redis-based Locking Mechanism I chose to implement a locking mechanism using Redis, a fast in-memory data store with built-in key expiry.\nWe allow the first request to refresh the token while the others wait for the result of the first request. Here’s how it works:\nThe backend returns Token expiration error, the frontend then sends a refresh request to the backend at /refresh. Two Redis keys are used: refresh_token_lock:\u0026lt;Refresh Token\u0026gt;: Indicates whether the refresh token is being processed. refresh_token:\u0026lt;Refresh Token\u0026gt;: Holds the result status of the refresh attempt for the Token. At /refresh backend first checks if a refresh_token:\u0026lt;Refresh Token\u0026gt; key exists in Redis. If it does, the system returns the corresponding status. If the key does not exist, we check for the refresh_token_lock:\u0026lt;Refresh Token\u0026gt; key to see if another request has acquired the lock. If the lock is held, the request waits for it to be released and then checks the status key again. If no lock is present, the request acquires the lock, performs the refresh, and sets the appropriate status key in Redis. The lock is then released, and the status is returned. This ensures that only the first request refreshes the token, while other requests wait for the result.\nConclusion: The Redis-based locking mechanism effectively handles and prevents concurrent refresh attempts and ensures that only one request is allowed to refresh tokens at a time. This solution enhances the overall reliability and security of token management in the system.\ntags: [OAuth, JWT, Redis, Security, Web Development]\n","permalink":"http://localhost:1313/blogs/overcoming-concurrent-refresh-attempts-of-access-tokens-jwt/","summary":"A deep dive into handling concurrent refresh attempts of access tokens in a single-page application using JWT, OAuth, and Redis-based locking mechanisms to enhance token management security.","title":"Overcoming Concurrent Refresh Attempts of Access Tokens (JWT)"},{"content":"Background I was tasked with developing a web interface for an e-sports FIFA tournament service (SAFA) that had been operating primarily on Discord\rthrough a Discord Bot. They wanted to extend their services to a website, and I was responsible for making it happen.\nAfter a new user joins their Discord server, before they could interact further (e.g., searching/joining teams), they were required to update their profile using a form. After which, they were given the role \u0026ldquo;updated-profile\u0026rdquo; and \u0026ldquo;free-agent\u0026rdquo; (not present in any team). A player, if present in a team, has the role \u0026ldquo;player\u0026rdquo;.\nThe Problem: API\rRate-Limits\rWhenever a user registers or logs into the website using Discord OAuth, the dashboard view presented to them is based on their roles within the Discord server. The roles dictate what actions the user can take:\nIs the user part of the Discord server? (If not, prompt them to join) Has the user updated their profile? (If not, show the form) Is the user a \u0026ldquo;free-agent\u0026rdquo;? (If yes, provide options to join/create a team) Is the user a \u0026ldquo;team manager\u0026rdquo;? (If yes, provide team management options) These role details are fetched from the Discord API. However, the API has strict rate limits: 5 requests per minute, with a soft reset allowing 1 request per minute after. The rate limit applies to a specific Access Token for a Discord server.\nSince user roles can change based on interactions through their existing Discord Bot (e.g., joining a team), we needed to re-fetch roles each time the browser tab was re-focused or reloaded. In a React development environment with StrictMode enabled, each component renders twice, which doubled the number of API requests, often resulting in the API being rate-limited.\nThe Solution Options There were two main approaches to handle this issue:\nBuild a Discord Bot and Maintain Internal User Data: This option would involve using WebSockets to track user role changes in real-time and storing this data in a database. While this would ensure up-to-date information, it introduces significant complexity and resource overhead.\nCache Fetched Data from the Discord API: This simpler solution involves caching user roles from the Discord API in a memory store (like Redis) to avoid hitting the rate limit. The trade-off is a delay in real-time data (maximum of 1 minute), but this was acceptable for our use case.\nWe opted for the caching approach using Redis, as it provides both time efficiency and native data expiry.\nThe Solution: Fetch with Cache Fallback We implemented a fetch-with-cache fallback mechanism. Here’s how it works:\n1. Check for Rate-Limit Key: Before making a request, we check if we’ve been rate-limited by looking for a Redis key of the pattern discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;AccessToken\u0026gt;_retry-after. This key is created when a previous request was rate-limited.\n2. Handle Rate-Limited Requests: If this key exists, we don’t attempt to make a new API call. Instead, we return the cached data stored in Redis with the key of pattern discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;UserID\u0026gt;, ensuring the user doesn’t see outdated information.\n3. Make API Request: If the rate-limit key isn’t found, we proceed to fetch the user’s roles from the Discord API.\nIf the request is successful, we cache the returned data with a key of the pattern discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;UserID\u0026gt; and return it. If the request hits a rate-limit error, we create the key discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;AccessToken\u0026gt;_retry-after with an expiry set to the rate-limit reset time (plus 1 second). After this, we return the previously cached data. This approach minimized unnecessary API calls while ensuring that users received role-based data quickly, even during rate-limited periods.\nWhat I Learned and Future Considerations While this solution worked well for our use case, I realized that using Redis opened up more possibilities for handling similar challenges elsewhere in the project. For instance, I later used Redis to solve another issue related to concurrent refresh attempts of access tokens.\nIn retrospect, there is an improvement we could consider for future versions: Partial WebSocket Implementation: Given the requirement for very specific role updates, partial WebSocket integration could help fetch only critical updates in real-time without introducing unnecessary overhead.\nConclusion A simple fetch-with-cache fallback system using Redis allowed us to deliver a smooth user experience while adhering to Discord’s API constraints. The combination of simplicity and effectiveness made Redis a good fit for this project.\n","permalink":"http://localhost:1313/blogs/overcoming-discord-api-rate-limits-with-redis-cache/","summary":"How to handle (Discord) API rate limits using a Redis-based caching mechanism in a web application.","title":"Overcoming (discord) API Rate Limits With Redis Cache"}]