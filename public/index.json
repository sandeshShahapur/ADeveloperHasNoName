[{"content":"You are familiar with using browsers to access websites and you might have seen URL\rs starting with http:// or https://. When you type a URL like http://example.com in your browser\u0026rsquo;s address bar and press Enter, you are then presented with the website\u0026rsquo;s content. How does this happen?\nFirst, where does the browser get this content from? From a Web-Server\r. Which Web-Server? The one whose IP-Address\ris associated with the domain name example.com which is resolved by the DNS\r, say for example 1.1.1.1.\nNow, the browser just can\u0026rsquo;t ask \u0026lsquo;Hey 1.1.1.1, I want something\u0026rsquo;, it needs to be able to ask in a way that the Web-Server understands. This is where the HTTP Protocol comes into play.\nWhat is HTTP?HTTP stands for HyperText\rTransfer\rProtocol\r. It is the format that client\rs (browsers) and server\rs (Web-Servers) use to communicate website components like HTML\r, CSS\r, JavaScript\rfiles, images, etc. with each other over the internet\r.\nIt is one of the Application Layer Protocols in TCP/IP, which means it is responsible for the communication between software applications on the network.\nSo, in a nutshell, HTTP is the language that the client and server use to exchange web components over the internet.\nHow Does HTTP Work?HTTP works in a client-server model.\nFirst, the client sends a request to the server. Let\u0026rsquo;s look at how this request looks:\nRequest Line: Contains the method, the URL, and the HTTP version. The method specifies the action to be performed on the resource (GET, POST, PUT, DELETE, etc.). The URL specifies the location of the resource. The HTTP version specifies the version of the HTTP protocol being used. Headers: Contains additional information about the request like the type of content the client can accept (text/html, application/json, etc.), the type of content the client is sending (application/x-www-form-urlencoded, multipart/form-data, etc.), the type of encoding used (gzip, deflate, etc.), and more. Body: Contains the data being sent to the server. This is optional and is used in POST, PUT and PATCH requests. Next, the server processes the request and responds with the requested content. Let\u0026rsquo;s look at how this response looks:\nStatus Line: Contains the HTTP version, the status code (200 for success, 404 for not found, 500 for server error, etc.), and a status message. Headers: Contains additional information about the response like the type of content being sent (text/html, application/json, etc.), the length of the content, the type of encoding used (gzip, deflate, etc.), and more. Body: Contains the data being sent back to the client. This can be HTML content, JSON\rdata, images, etc. One of the key features of HTTP is that it is a stateless protocol, which means each request is independent of the previous one. The server does not maintain any information about the client\u0026rsquo;s previous requests. To maintain state between requests, technologies like cookies and sessions are used.\nIn this way, HTTP enables the client and server to communicate effectively over the internet.\nHTTP MethodsEvery HTTP request contains a method that specifies the action to be performed on the resource. Some common HTTP methods are:\nGET: Used to retrieve data from the server. The data is sent in the URL. POST: Used to submit data to the server. The data is sent in the body of the request. PUT: Used to update data on the server. The data is sent in the body of the request. DELETE: Used to delete data on the server. The data is sent in the URL. PATCH: Used to partially update data on the server. The data is sent in the body of the request. HEAD: Similar to GET but only returns the headers OPTIONS: Used to check what methods are allowed on a resource HTTP Status CodesEvery HTTP response contains a status code that indicates the status of the request. Range of status codes are divided into 5 categories:\n1xx: Informational responses. Example: 100 Continue, 101 Switching Protocols. 2xx: Success responses. Example: 200 OK, 201 Created, 204 No Content. 3xx: Redirection responses. Example: 301 Moved Permanently, 302 Found, 304 Not Modified. 4xx: Client error responses. Example: 400 Bad Request, 401 Unauthorized, 404 Not Found. 5xx: Server error responses. Example: 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable. These codes help developers and clients identify the result of the request, enabling effective debugging.\nIdempotent MethodsSome HTTP methods are considered idempotent, which means that making the same request multiple times has the same effect as making it once. This property is useful in scenarios where requests can be retried without causing unintended side effects. Some idempotent methods are:\nGET: Retrieving data multiple times has the same effect. PUT: Updating data multiple times has the same effect. DELETE: Deleting data multiple times has the same effect. HEAD: Retrieving headers multiple times has the same effect. OPTIONS: Checking allowed methods multiple times has the same effect. Post and Patch methods are not idempotent as making the same request multiple times can have different effects.\nHTTP VersionsHTTP has evolved over the years, with different versions introducing new features and improvements. Some of the major versions are:\nHTTP/0.9: The first version of HTTP, introduced in 1991. It was a simple protocol that allowed clients to request a single file from a server. HTTP/1.0: Introduced in 1996, it added support for multiple types of data, including images, audio, and video. It also introduced status codes and headers. HTTP/1.1: Introduced in 1999, it is the most widely used version of HTTP. It introduced persistent connections, pipelining, and improved caching. HTTP/2: Introduced in 2015, it is a major revision of the HTTP protocol. It introduced features like multiplexing, header compression, and server push to improve performance. HTTP/3: Introduced in 2020, it is the latest version of HTTP. It is based on the QUIC protocol and aims to improve performance and security. Each version of HTTP builds on the previous one, adding new features and improvements to make the protocol more efficient and secure.\nHTTPSHTTP is a text-based protocol, which means that data sent over HTTP requests and responses is not encrypted. This means that anyone who intercepts the data can read it easily as plain text.\nConsider the scenarios where you are logging into your bank account over an unencrypted HTTP connection. If someone intercepts the data, they can read your username and password, compromising your account. Or consider when you are entering your credit card details on an e-commerce website, if the HTTP connection is not encrypted, your credit card information can be stolen.\nTo address this security concern, HTTPS was introduced. HTTPS stands for HyperText Transfer Protocol Secure. It is the secure version of HTTP that encrypts the data sent between the client and server, making it difficult for attackers to intercept and read the data. HTTPS uses the SSL/TLS protocol to encrypt the data, ensuring that sensitive information like passwords, credit card details, and personal information is protected.\nWhen you visit a website that uses HTTPS, you will see a padlock icon in the address bar of your browser, indicating that the connection is secure. It is important to use HTTPS on websites that handle sensitive information to protect user data from interception and theft.\nConclusionHTTP/S is the backbone of the internet, enabling communication between clients and servers. Understanding how HTTP works, its methods, status codes, versions, and security features is essential for web developers to build secure and efficient web applications. By following the principles of HTTP, developers can create fast, reliable, and secure web experiences for users around the world.\n","permalink":"http://localhost:1313/blogs/what_are_http_and_https_protocols/","summary":"An in-depth look at what the HTTP protocol is, how it works, its methods, status codes, versions, and security features. Learn how HTTP enables communication between clients and servers over the internet.","title":"What are HTTP and HTTPS Protocols?"},{"content":"When you visit a website, you might have noticed a message that says, \u0026ldquo;This website uses cookies to ensure you get the best experience on our website\u0026rdquo; or have received a prompt to accept cookies. Before understanding what these cookies are and why they are used, let us look at the context around cookies.\nWhy Cookies?Browsers use the HTTP protocol to communicate with a web-server\rfor requesting web pages, images, videos, and other resources. HTTP is a stateless protocol, meaning that each request is independent of the previous one, and the server does not maintain any information about your interactions with the website. However, websites often need to remember user-specific information to provide a personalized experience like remembering your login status, preferences, shopping cart items, and more.\nThere are few options for storing data on the client\r(browser) like:\nCookies: Small pieces of data. Local Storage: A larger storage area. Session Storage: A storage area that stores data for the duration of the page session. What Are Cookies?Cookies are small pieces of data stored on your browser by websites you visit. They have a name and a value, and they can also have additional attributes. They are used to store user-specific information like login status, preferences, shopping cart items, and more.\nWhy/When to use Cookies over Local/Session Storage?Cookies provide the following advantages over Local/Session Storage:\nCookies are sent with every request: Cookies are sent with every request to the server, allowing the server to remember user-specific information. Local/Session Storage is not sent with every request. Expiration and Path: Cookies can have an expiration date and a path, allowing them to be stored for a specific duration and accessed only on specific paths. Local/Session Storage either persists forever (Local Storage) or is cleared when the page session ends (Session Storage). Security: Cookies can have attributes that enhances security whereas Local/Session Storage does not have these security features. How Do Cookies Work?When you visit a website, the server sends a response to your browser with the web page content and a set of instructions to create cookies. Your browser stores these cookies and sends them back to the server with every subsequent request (given the cookie\u0026rsquo;s path matches the request path) you make to the website.\nNote: In the case when a website uses different domains for its frontend\rand backend\r, cookies are likely not stored by the frontend domain (the website you visit), but by the backend domain.\nThus every cookie is associated with only one domain which is the the domain of the web server that set the cookie.\nAs Cookies are associated with a specific domain and path on the website, cookies created by one website cannot be accessed by another website. For example, cookies created by example.com cannot be accessed by anotherexample.com.\nNote: If the frontend and backend are on different domains, and the backend sets a cookie, the frontend cannot access it through document.cookie as it is on a different domain.\nWhy Are Cookies Used?Cookies serve several purposes on the web:\nSession Management: Cookies are used to manage user sessions on websites. They help websites remember your login status, shopping cart items, and other session-related information. Tracking and Analytics: Cookies are used for tracking user behavior on websites. They help website owners understand how users interact with their site, which pages are popular, and more. Advertising: Cookies are used for targeted advertising. They help advertisers show relevant ads to users based on their browsing history and interests. Cookie AttributesCookies can have several attributes that define their behavior:\nName and Value: The name and value of the cookie. Domain: The domain or sub-domains associated with the cookie. The cookie is sent to this sub/domain on subsequent requests. Path: The path on the website where the cookie is valid. The cookie is sent only for requests that match this path. Expiration Date: The date and time when the cookie expires. After this time, the cookie is no longer sent to the server. Secure: A flag that indicates the cookie should only be sent over secure connections (HTTPS). This ensures that the cookie is not sent over ( unencrypted\r) connections. HttpOnly: A flag that indicates the cookie should not be accessible by JavaScript (document.cookie). This helps to prevent cross-site scripting attacks (XSS) where malicious scripts can access sensitive cookies. SameSite: A flag that indicates how the cookie should be sent in cross-site requests. It helps prevent cross-site request forgery (CSRF) attacks by restricting when cookies are sent in cross-origin requests. Managing CookiesMost modern browsers allow you to manage cookies through their settings. You can view the cookies stored on your browser, delete specific cookies, block all cookies, or block cookies from specific websites.\nBy managing cookies, you can control your privacy and security while browsing the web. However, blocking all cookies may affect the functionality of some websites that rely on cookies for essential features.\nConclusionCookies are an essential part of the web ecosystem, allowing websites to remember user-specific information and provide a personalized experience. They are used for session management, personalization, tracking, advertising, and more. By understanding how cookies work and their attributes, you can make informed decisions about your privacy and security while browsing the web.\n","permalink":"http://localhost:1313/blogs/what_are_browser_http_cookies/","summary":"An in-depth look at what browser HTTP cookies are, why they are used, how they work, and their attributes. Learn how cookies are used for session management, personalization, tracking, and advertising on the web.","title":"What Are Browser HTTP Cookies?"},{"content":"\rWhy OAuth?Before we dive into OAuth, let\u0026rsquo;s understand why it is essential in the context of security. Every tool that humans create is done for fixing a problem, and OAuth is no different.\nLet us consider a scenario where you have stored your media files (images, videos, etc.) on a cloud storage service like Google Drive. Now, you are using a media editing application and want to edit an image/video that is stored on your Google Drive. You don\u0026rsquo;t want to download the file to your local system, edit it with the editing application, and then upload it back to Google Drive, because you find it inconvenient. Instead, you want the media editing application to directly access the file on Google Drive and make the necessary changes.\nSo, how can the media editing application access your files on Google Drive? The files are private and can only be accessed by you. One way is to provide your Google Drive credentials (username and password) to the media editing application. But this is a security risk because the application can misuse your credentials or store them insecurely. This is where OAuth comes into play. It provides a secure way for you to grant access to your Google Drive files to the media editing application without sharing your credentials.\nIn this way, OAuth enables communication between different services while maintaining the security and privacy of user data.\n2.0? Are there different versions of OAuth?In this guide, we will focus on OAuth 2.0, which is the latest version of the OAuth protocol. Other versions are OAuth 1.0 and OAuth 1.0a, which are now considered outdated due to security vulnerabilities and limitations.\nDefinitionOAuth (Open Authorization) is a protocol\rthat allows a user to grant limited access to their resources on one site to another site without sharing their credentials.\nUse Cases of OAuth 2.0OAuth 2.0 is widely used in various scenarios to grant access to user data securely. Some common use cases of OAuth 2.0 include:\nSocial Login: Users can log in to applications using their social media accounts like Google, Facebook, or Twitter (remember the \u0026ldquo;Log in with Google\u0026rdquo; or \u0026ldquo;Log in with Facebook\u0026rdquo; buttons?). As authentication is provided by the social media accounts, this eliminates the need to create a new account and remember another set of credentials. It also lifts the burden of password management and security from the application owner. - It enables Single Sign-On (SSO): Users can log in to multiple applications using a single set of credentials. API Authorization: Third-Party applications including plugins/extensions can access user data through APIs like Discord, Google Drive, Twitter, GitHub, etc. Components of OAuth 2.0 Resource Owner: The user who owns the data and grants access to it. In the Google Drive example, you are the resource owner. Client: The third-party application or website that wants to access the user\u0026rsquo;s data. In the Google Drive example, the media editing application is the client. Authorization Server: The server that authenticates the user and issues Access Tokens. In the Google Drive example, Google Drive\u0026rsquo;s authorization server. Resource Server: The server that hosts the user\u0026rsquo;s data and verifies Access Tokens. In the Google Drive example, Google Drive itself. How OAuth 2.0 WorksIf the users don\u0026rsquo;t share their credentials, how does OAuth 2.0 work? Through the term we mentioned earlier: \u0026ldquo;Access Tokens.\u0026rdquo; Access Tokens are like keys that allow the client to access the user\u0026rsquo;s data without knowing the user\u0026rsquo;s credentials. These tokens are short-lived and can be revoked by the user at any time. As they are short lived, we often use another key called the \u0026ldquo;Refresh Token\u0026rdquo; to get a new Access Token when the current one expires.\nOAuth 2.0 works by following a series of steps to grant access to the user\u0026rsquo;s data:\nAuthorization Request: The client sends an authorization request to the authorization server, asking for permission to access the user\u0026rsquo;s data. The set of permissions requested is known as a \u0026ldquo;scope\u0026rdquo; (e.g., read-only access, read-write access, delete access). Example: \u0026ldquo;Can I access this user\u0026rsquo;s Google Drive files?\u0026rdquo; User Authentication: The user authenticates with the authorization server and grants permission to the client. (You should always check the scope of permissions requested before granting access). Example: You log in to your Google account and authorize the media editing application to access your Google Drive files. Access Token Request: The client sends a request to the authorization server for an Access Token. Example: The media editing application requests an Access Token to access your Google Drive files. Access Token Grant: The authorization server issues an Access Token to the client. Example: Google Drive issues an Access Token to the media editing application. Access Resource: The client sends the Access Token to the resource server to access the user\u0026rsquo;s data. Example: The media editing application uses the Access Token to access your Google Drive files. Resource Access: The resource server verifies the Access Token and grants access to the user\u0026rsquo;s data. Example: Google Drive verifies the Access Token and allows the media editing application to access your files. ConclusionOAuth 2.0 is a powerful and secure protocol that allows users to grant access to their data without sharing their credentials. It is widely used in various applications and scenarios to provide a secure and flexible way to access user data. Understanding OAuth 2.0 is essential for developers who want to build secure and user-friendly applications that interact with third-party services.\n","permalink":"http://localhost:1313/blogs/what_is_oauth_2.0_definition_use_cases_and_how_it_works/","summary":"A comprehensive guide to understanding OAuth (2.0), its definition, use cases, and how it works to grant secure access to user data.","title":"What Is OAuth (2.0)? | Definition, Use Cases, and How it Works"},{"content":"\rBackground:I was tasked with extending an e-sports FIFA tournament service (SAFA) that had been operating primarily on Discord through a Discord bot, to the web. The aim was to develop a web interface by integrating it with Discord, which provides OAuth authentication. Since the database for users was modeled around their Discord account ID, I implemented login functionality using Discord OAuth and JWT tokens.\nAuthorization Workflow:Initially, the user is logged out. Upon login, an access token and refresh token are created, both stored as JWTs in cookies. The access token is sent with all requests (via the bearer authorization header), while the refresh token is only sent to a specific refresh endpoint (/refresh). The backend verifies these tokens (JWT verification) whenever frontend makes a request to it.\nIf verification fails for reasons other than expiration, the user is logged out. If the token has expired, the frontend silently attempts to refresh it by sending a request to backend at /refresh. If the refresh is successful, new access and refresh tokens are issued, and the original request is retried. If any error occurs during this process, including token expiry, the user is logged out.\nThe Problem:This process works well when only one request is sent at a time. However, since the website uses client-side rendering (CSR) and is a single-page application (SPA) built with React, users often send multiple AJAX requests simultaneously. This can lead to unintended session termination due to concurrent refresh attempts which logs the user out.\nWhy does this happen?When the access token has expired, the first request to the backend triggers a refresh and retrieves new tokens. However, before these new tokens are updated to the frontend, other requests are sent with the old tokens. If those requests also try to refresh the tokens, Discord returns an error (403) because the refresh token has already been used. This causes the system to terminate the user\u0026rsquo;s session thereby logging them out.\nSolution Options: Extend token expiration periods: This reduces the frequency of refreshes and unintended session terminations, but it introduces security risks and is not a proper solution. Queue requests: When the frontend detects an expired token, it queues the requests until the refresh is completed. This can slow down the app, especially when expiration times are short. Locking mechanism of Refresh Token: The backend uses locks on Refresh Tokens, ensuring that only one refresh attempt for a Refresh Token is processed at a time. The Chosen Solution: Redis-based Locking MechanismI chose to implement a locking mechanism using Redis, a fast in-memory data store with built-in key expiry.\nWe allow the first request to refresh the token while the others wait for the result of the first request. Here’s how it works:\nThe backend returns Token expiration error, the frontend then sends a refresh request to the backend at /refresh. Two Redis keys are used: refresh_token_lock:\u0026lt;Refresh Token\u0026gt;: Indicates whether the refresh token is being processed. refresh_token:\u0026lt;Refresh Token\u0026gt;: Holds the result status of the refresh attempt for the Token. At /refresh backend first checks if a refresh_token:\u0026lt;Refresh Token\u0026gt; key exists in Redis. If it does, the system returns the corresponding status. If the key does not exist, we check for the refresh_token_lock:\u0026lt;Refresh Token\u0026gt; key to see if another request has acquired the lock. If the lock is held, the request waits for it to be released and then checks the status key again. If no lock is present, the request acquires the lock, performs the refresh, and sets the appropriate status key in Redis. The lock is then released, and the status is returned. This ensures that only the first request refreshes the token, while other requests wait for the result.\nConclusion:The Redis-based locking mechanism effectively handles and prevents concurrent refresh attempts and ensures that only one request is allowed to refresh tokens at a time. This solution enhances the overall reliability and security of token management in the system.\ntags: [OAuth, JWT, Redis, Security, Web Development]\n","permalink":"http://localhost:1313/blogs/overcoming-concurrent-refresh-attempts-of-access-tokens-jwt/","summary":"A deep dive into handling concurrent refresh attempts of access tokens in a single-page application using JWT, OAuth, and Redis-based locking mechanisms to enhance token management security.","title":"Overcoming Concurrent Refresh Attempts of Access Tokens (JWT)"},{"content":"\rBackgroundI was tasked with developing a web interface for an e-sports FIFA tournament service (SAFA) that had been operating primarily on Discord\rthrough a Discord Bot. They wanted to extend their services to a website, and I was responsible for making it happen.\nAfter a new user joins their Discord server, before they could interact further (e.g., searching/joining teams), they were required to update their profile using a form. After which, they were given the role \u0026ldquo;updated-profile\u0026rdquo; and \u0026ldquo;free-agent\u0026rdquo; (not present in any team). A player, if present in a team, has the role \u0026ldquo;player\u0026rdquo;.\nThe Problem: API\rRate-Limits\rWhenever a user registers or logs into the website using Discord OAuth, the dashboard view presented to them is based on their roles within the Discord server. The roles dictate what actions the user can take:\nIs the user part of the Discord server? (If not, prompt them to join) Has the user updated their profile? (If not, show the form) Is the user a \u0026ldquo;free-agent\u0026rdquo;? (If yes, provide options to join/create a team) Is the user a \u0026ldquo;team manager\u0026rdquo;? (If yes, provide team management options) These role details are fetched from the Discord API. However, the API has strict rate limits: 5 requests per minute, with a soft reset allowing 1 request per minute after. The rate limit applies to a specific Access Token for a Discord server.\nSince user roles can change based on interactions through their existing Discord Bot (e.g., joining a team), we needed to re-fetch roles each time the browser tab was re-focused or reloaded. In a React development environment with StrictMode enabled, each component renders twice, which doubled the number of API requests, often resulting in the API being rate-limited.\nThe Solution OptionsThere were two main approaches to handle this issue:\nBuild a Discord Bot and Maintain Internal User Data: This option would involve using WebSockets to track user role changes in real-time and storing this data in a database. While this would ensure up-to-date information, it introduces significant complexity and resource overhead.\nCache Fetched Data from the Discord API: This simpler solution involves caching user roles from the Discord API in a memory store (like Redis) to avoid hitting the rate limit. The trade-off is a delay in real-time data (maximum of 1 minute), but this was acceptable for our use case.\nWe opted for the caching approach using Redis, as it provides both time efficiency and native data expiry.\nThe Solution: Fetch with Cache FallbackWe implemented a fetch-with-cache fallback mechanism. Here’s how it works:\n1. Check for Rate-Limit Key:Before making a request, we check if we’ve been rate-limited by looking for a Redis key of the pattern discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;AccessToken\u0026gt;_retry-after. This key is created when a previous request was rate-limited.\n2. Handle Rate-Limited Requests:If this key exists, we don’t attempt to make a new API call. Instead, we return the cached data stored in Redis with the key of pattern discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;UserID\u0026gt;, ensuring the user doesn’t see outdated information.\n3. Make API Request:If the rate-limit key isn’t found, we proceed to fetch the user’s roles from the Discord API.\nIf the request is successful, we cache the returned data with a key of the pattern discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;UserID\u0026gt; and return it. If the request hits a rate-limit error, we create the key discord_roles_\u0026lt;ServerID\u0026gt;_\u0026lt;AccessToken\u0026gt;_retry-after with an expiry set to the rate-limit reset time (plus 1 second). After this, we return the previously cached data. This approach minimized unnecessary API calls while ensuring that users received role-based data quickly, even during rate-limited periods.\nWhat I Learned and Future ConsiderationsWhile this solution worked well for our use case, I realized that using Redis opened up more possibilities for handling similar challenges elsewhere in the project. For instance, I later used Redis to solve another issue related to concurrent refresh attempts of access tokens.\nIn retrospect, there is an improvement we could consider for future versions:Partial WebSocket Implementation: Given the requirement for very specific role updates, partial WebSocket integration could help fetch only critical updates in real-time without introducing unnecessary overhead.\nConclusionA simple fetch-with-cache fallback system using Redis allowed us to deliver a smooth user experience while adhering to Discord’s API constraints. The combination of simplicity and effectiveness made Redis a good fit for this project.\n","permalink":"http://localhost:1313/blogs/overcoming-discord-api-rate-limits-with-redis-cache/","summary":"How to handle (Discord) API rate limits using a Redis-based caching mechanism in a web application.","title":"Overcoming (discord) API Rate Limits With Redis Cache"}]